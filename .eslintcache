[{"/Users/mbuto/Downloads/Corner-master/Client/src/index.js":"1","/Users/mbuto/Downloads/Corner-master/Client/src/store.js":"2","/Users/mbuto/Downloads/Corner-master/Client/src/serviceWorker.js":"3","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/articlePageReducer.js":"4","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/authReducer.js":"5","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/courseReducer.js":"6","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/lectureCommentsReducer.js":"7","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/discussionReducer.js":"8","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/examReducer.js":"9","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/announcementsReducer.js":"10","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/lectureReducer.js":"11","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/assessmentTakingReducer.js":"12","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/gradebookReducer.js":"13","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/submissionsReducer.js":"14","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/assessmentCreationReducer.js":"15","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/moduleReducer.js":"16","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/participantsReducer.js":"17","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/assignmentReducer.js":"18","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/courseSettingsReducer.js":"19","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/achievementsReducer.js":"20","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/deadlinesReducer.js":"21","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/summaryGradebookReducer.js":"22","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/notificationsReducer.js":"23","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/articlesReducer.js":"24","/Users/mbuto/Downloads/Corner-master/Client/src/reducers/calendarReducer.js":"25","/Users/mbuto/Downloads/Corner-master/Client/src/App/index.jsx":"26","/Users/mbuto/Downloads/Corner-master/Client/src/subscription.js":"27","/Users/mbuto/Downloads/Corner-master/Client/src/actions/articlePage.js":"28","/Users/mbuto/Downloads/Corner-master/Client/src/actions/lecture.js":"29","/Users/mbuto/Downloads/Corner-master/Client/src/actions/announcements.js":"30","/Users/mbuto/Downloads/Corner-master/Client/src/actions/assessment.js":"31","/Users/mbuto/Downloads/Corner-master/Client/src/actions/course.js":"32","/Users/mbuto/Downloads/Corner-master/Client/src/actions/submissions.js":"33","/Users/mbuto/Downloads/Corner-master/Client/src/actions/courseModules.js":"34","/Users/mbuto/Downloads/Corner-master/Client/src/actions/notification.js":"35","/Users/mbuto/Downloads/Corner-master/Client/src/actions/articles.js":"36","/Users/mbuto/Downloads/Corner-master/Client/src/services/checkModeration.js":"37","/Users/mbuto/Downloads/Corner-master/Client/src/services/article.js":"38","/Users/mbuto/Downloads/Corner-master/Client/src/services/users.js":"39","/Users/mbuto/Downloads/Corner-master/Client/src/services/courses.js":"40","/Users/mbuto/Downloads/Corner-master/Client/src/services/lectures.js":"41","/Users/mbuto/Downloads/Corner-master/Client/src/services/announcements.js":"42","/Users/mbuto/Downloads/Corner-master/Client/src/services/discussion.js":"43","/Users/mbuto/Downloads/Corner-master/Client/src/services/gradebook.js":"44","/Users/mbuto/Downloads/Corner-master/Client/src/services/submissions.js":"45","/Users/mbuto/Downloads/Corner-master/Client/src/actions/assessmentTaking.js":"46","/Users/mbuto/Downloads/Corner-master/Client/src/actions/auth.js":"47","/Users/mbuto/Downloads/Corner-master/Client/src/services/s3Service.js":"48","/Users/mbuto/Downloads/Corner-master/Client/src/services/assessments.js":"49","/Users/mbuto/Downloads/Corner-master/Client/src/services/achievements.js":"50","/Users/mbuto/Downloads/Corner-master/Client/src/services/deadlines.js":"51","/Users/mbuto/Downloads/Corner-master/Client/src/services/notifications.js":"52","/Users/mbuto/Downloads/Corner-master/Client/src/actions/discussion.js":"53","/Users/mbuto/Downloads/Corner-master/Client/src/services/enrollment.js":"54","/Users/mbuto/Downloads/Corner-master/Client/src/services/courseModules.js":"55","/Users/mbuto/Downloads/Corner-master/Client/src/services/config.js":"56","/Users/mbuto/Downloads/Corner-master/Client/src/App/style.js":"57","/Users/mbuto/Downloads/Corner-master/Client/src/views/archives/index.jsx":"58","/Users/mbuto/Downloads/Corner-master/Client/src/views/achievements/index.jsx":"59","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/myBookMarks/myBookMarks.jsx":"60","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/myArticles/myArticles.jsx":"61","/Users/mbuto/Downloads/Corner-master/Client/src/components/CourseRoute/index.jsx":"62","/Users/mbuto/Downloads/Corner-master/Client/src/views/courseSettings/index.jsx":"63","/Users/mbuto/Downloads/Corner-master/Client/src/views/assignments/index.jsx":"64","/Users/mbuto/Downloads/Corner-master/Client/src/views/courseParticipants/index.jsx":"65","/Users/mbuto/Downloads/Corner-master/Client/src/components/RegistrationConfirmation/index.jsx":"66","/Users/mbuto/Downloads/Corner-master/Client/src/components/AppHeader/index.jsx":"67","/Users/mbuto/Downloads/Corner-master/Client/src/components/AccountVerification/index.jsx":"68","/Users/mbuto/Downloads/Corner-master/Client/src/components/schoolRegistration/index.jsx":"69","/Users/mbuto/Downloads/Corner-master/Client/src/components/EmailVerify/index.jsx":"70","/Users/mbuto/Downloads/Corner-master/Client/src/components/AdminApproval/index.jsx":"71","/Users/mbuto/Downloads/Corner-master/Client/src/views/NotFoundView/index.jsx":"72","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/index.jsx":"73","/Users/mbuto/Downloads/Corner-master/Client/src/views/courseCalendar/index.jsx":"74","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/index.jsx":"75","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/index.jsx":"76","/Users/mbuto/Downloads/Corner-master/Client/src/views/dashboard/index.jsx":"77","/Users/mbuto/Downloads/Corner-master/Client/src/views/announcements/index.jsx":"78","/Users/mbuto/Downloads/Corner-master/Client/src/views/discussions/index.jsx":"79","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/index.jsx":"80","/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/index.jsx":"81","/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/index.jsx":"82","/Users/mbuto/Downloads/Corner-master/Client/src/views/Profile/index.jsx":"83","/Users/mbuto/Downloads/Corner-master/Client/src/views/ArticlePage/index.jsx":"84","/Users/mbuto/Downloads/Corner-master/Client/src/views/courses/index.jsx":"85","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/index.jsx":"86","/Users/mbuto/Downloads/Corner-master/Client/src/components/PrivateRoute/index.jsx":"87","/Users/mbuto/Downloads/Corner-master/Client/src/components/PublicRoute/index.jsx":"88","/Users/mbuto/Downloads/Corner-master/Client/src/components/SideNav/index.jsx":"89","/Users/mbuto/Downloads/Corner-master/Client/src/pages/Registeration/index.jsx":"90","/Users/mbuto/Downloads/Corner-master/Client/src/pages/NotFoundPage/index.jsx":"91","/Users/mbuto/Downloads/Corner-master/Client/src/pages/Login/index.jsx":"92","/Users/mbuto/Downloads/Corner-master/Client/src/components/schoolRegistration/style.js":"93","/Users/mbuto/Downloads/Corner-master/Client/src/views/style.js":"94","/Users/mbuto/Downloads/Corner-master/Client/src/hooks/useCourseprivilege.js":"95","/Users/mbuto/Downloads/Corner-master/Client/src/constants/userRoles.js":"96","/Users/mbuto/Downloads/Corner-master/Client/src/components/Spinner.jsx":"97","/Users/mbuto/Downloads/Corner-master/Client/src/pages/Login/style.js":"98","/Users/mbuto/Downloads/Corner-master/Client/src/pages/Registeration/style.js":"99","/Users/mbuto/Downloads/Corner-master/Client/src/components/Logo.jsx":"100","/Users/mbuto/Downloads/Corner-master/Client/src/components/CourseCard.jsx":"101","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/Submissions.jsx":"102","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/AssessmentCreation.jsx":"103","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/components/FollowIcon.jsx":"104","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/components/BookMarkIcon.jsx":"105","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/components/LikeIcon.jsx":"106","/Users/mbuto/Downloads/Corner-master/Client/src/components/Article/comments/index.jsx":"107","/Users/mbuto/Downloads/Corner-master/Client/src/components/DropDownNotification/index.jsx":"108","/Users/mbuto/Downloads/Corner-master/Client/src/components/ProfileIcon/index.jsx":"109","/Users/mbuto/Downloads/Corner-master/Client/src/components/CourseNavigation/index.jsx":"110","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/AssessmentOptionsMenu.jsx":"111","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/AssessmentQuestionsSection.jsx":"112","/Users/mbuto/Downloads/Corner-master/Client/src/components/AutoGradingTag.jsx":"113","/Users/mbuto/Downloads/Corner-master/Client/src/components/PlagarismTag.jsx":"114","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/QuestionList.jsx":"115","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/WrittenQuestionForm.jsx":"116","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/ChoiceQuestionForm.jsx":"117","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewWrittenQuestion/index.jsx":"118","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewChoiceQuestion/index.jsx":"119","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/QuestionHead.jsx":"120","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewWrittenQuestion/style.js":"121","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewChoiceQuestion/style.js":"122","/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/LectureComments.jsx":"123","/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/components/ModuleList.jsx":"124","/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/VideoInfo.jsx":"125","/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/PlaylistMenu.jsx":"126","/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/Video.jsx":"127","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/QuestionsSection.jsx":"128","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/spyLogic.jsx":"129","/Users/mbuto/Downloads/Corner-master/Client/src/views/discussions/components/discussionCard.jsx":"130","/Users/mbuto/Downloads/Corner-master/Client/src/views/announcements/components/announcementCard.jsx":"131","/Users/mbuto/Downloads/Corner-master/Client/src/services/cheatingService.js":"132","/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/VideoItem.jsx":"133","/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/components/ModuleItemForm.jsx":"134","/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/components/ModuleItem.jsx":"135","/Users/mbuto/Downloads/Corner-master/Client/src/views/discussions/components/commentCard.jsx":"136","/Users/mbuto/Downloads/Corner-master/Client/src/components/SubmissionTimeTag.jsx":"137","/Users/mbuto/Downloads/Corner-master/Client/src/components/FileDisplay.jsx":"138","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/QuestionList.jsx":"139","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/instructorGB.jsx":"140","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/studentGB.jsx":"141","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/GradingQuestionList.jsx":"142","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/FileDispaly.jsx":"143","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/WrittenQuestionForm.jsx":"144","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/ChoiceQuestionForm.jsx":"145","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/ChoiceQuestion.jsx":"146","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/WrittenQuestion.jsx":"147","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/infoTable.jsx":"148","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/summaryGB.jsx":"149","/Users/mbuto/Downloads/Corner-master/Client/src/components/ForgotPassword/index.jsx":"150","/Users/mbuto/Downloads/Corner-master/Client/src/components/ResetPassword/index.jsx":"151","/Users/mbuto/Downloads/Corner-master/Client/src/pages/ForgetPassword/index.jsx":"152","/Users/mbuto/Downloads/Corner-master/Client/src/views/upload/index.jsx":"153","/Users/mbuto/Downloads/Corner-master/Client/src/components/FileUpload/index.jsx":"154"},{"size":678,"mtime":1694475788040,"results":"155","hashOfConfig":"156"},{"size":3276,"mtime":1692586724000,"results":"157","hashOfConfig":"156"},{"size":5033,"mtime":1692586724000,"results":"158","hashOfConfig":"156"},{"size":6472,"mtime":1692586724000,"results":"159","hashOfConfig":"156"},{"size":2856,"mtime":1699025981881,"results":"160","hashOfConfig":"156"},{"size":3765,"mtime":1701381119214,"results":"161","hashOfConfig":"156"},{"size":2664,"mtime":1692586724000,"results":"162","hashOfConfig":"156"},{"size":3821,"mtime":1701897616438,"results":"163","hashOfConfig":"156"},{"size":1497,"mtime":1702141603653,"results":"164","hashOfConfig":"156"},{"size":2315,"mtime":1702152148638,"results":"165","hashOfConfig":"156"},{"size":2171,"mtime":1692586724000,"results":"166","hashOfConfig":"156"},{"size":2873,"mtime":1692586724000,"results":"167","hashOfConfig":"156"},{"size":711,"mtime":1692586724000,"results":"168","hashOfConfig":"156"},{"size":2675,"mtime":1692586724000,"results":"169","hashOfConfig":"156"},{"size":4251,"mtime":1695848839839,"results":"170","hashOfConfig":"156"},{"size":4964,"mtime":1695838713116,"results":"171","hashOfConfig":"156"},{"size":1685,"mtime":1701901752792,"results":"172","hashOfConfig":"156"},{"size":1659,"mtime":1702083909807,"results":"173","hashOfConfig":"156"},{"size":1973,"mtime":1692586724000,"results":"174","hashOfConfig":"156"},{"size":925,"mtime":1692586724000,"results":"175","hashOfConfig":"156"},{"size":878,"mtime":1692586724000,"results":"176","hashOfConfig":"156"},{"size":787,"mtime":1692586724000,"results":"177","hashOfConfig":"156"},{"size":2914,"mtime":1692586724000,"results":"178","hashOfConfig":"156"},{"size":4050,"mtime":1692586724000,"results":"179","hashOfConfig":"156"},{"size":915,"mtime":1692586724000,"results":"180","hashOfConfig":"156"},{"size":8534,"mtime":1701900244868,"results":"181","hashOfConfig":"156"},{"size":2377,"mtime":1692586724000,"results":"182","hashOfConfig":"156"},{"size":563,"mtime":1692586724000,"results":"183","hashOfConfig":"156"},{"size":96,"mtime":1692586724000,"results":"184","hashOfConfig":"156"},{"size":227,"mtime":1698968763273,"results":"185","hashOfConfig":"156"},{"size":270,"mtime":1692586724000,"results":"186","hashOfConfig":"156"},{"size":373,"mtime":1692586724000,"results":"187","hashOfConfig":"156"},{"size":151,"mtime":1692586724000,"results":"188","hashOfConfig":"156"},{"size":482,"mtime":1695759491526,"results":"189","hashOfConfig":"156"},{"size":148,"mtime":1692586724000,"results":"190","hashOfConfig":"156"},{"size":385,"mtime":1692586724000,"results":"191","hashOfConfig":"156"},{"size":417,"mtime":1692586724000,"results":"192","hashOfConfig":"156"},{"size":4106,"mtime":1694642580534,"results":"193","hashOfConfig":"156"},{"size":901,"mtime":1702344267951,"results":"194","hashOfConfig":"156"},{"size":1741,"mtime":1702344188126,"results":"195","hashOfConfig":"156"},{"size":1648,"mtime":1702079887250,"results":"196","hashOfConfig":"156"},{"size":891,"mtime":1702344164465,"results":"197","hashOfConfig":"156"},{"size":1544,"mtime":1702344215101,"results":"198","hashOfConfig":"156"},{"size":736,"mtime":1695249780896,"results":"199","hashOfConfig":"156"},{"size":1624,"mtime":1695835565236,"results":"200","hashOfConfig":"156"},{"size":157,"mtime":1692586724000,"results":"201","hashOfConfig":"156"},{"size":169,"mtime":1692586724000,"results":"202","hashOfConfig":"156"},{"size":1384,"mtime":1695755695097,"results":"203","hashOfConfig":"156"},{"size":1154,"mtime":1702152614341,"results":"204","hashOfConfig":"156"},{"size":361,"mtime":1694699446652,"results":"205","hashOfConfig":"156"},{"size":499,"mtime":1702344199201,"results":"206","hashOfConfig":"156"},{"size":1820,"mtime":1702344232885,"results":"207","hashOfConfig":"156"},{"size":249,"mtime":1692586724000,"results":"208","hashOfConfig":"156"},{"size":592,"mtime":1695220646413,"results":"209","hashOfConfig":"156"},{"size":2184,"mtime":1695848656092,"results":"210","hashOfConfig":"156"},{"size":796,"mtime":1695693295180,"results":"211","hashOfConfig":"156"},{"size":255,"mtime":1692586724000,"results":"212","hashOfConfig":"156"},{"size":1314,"mtime":1701203956430,"results":"213","hashOfConfig":"156"},{"size":2002,"mtime":1692586724000,"results":"214","hashOfConfig":"156"},{"size":4921,"mtime":1692586724000,"results":"215","hashOfConfig":"156"},{"size":4985,"mtime":1692586724000,"results":"216","hashOfConfig":"156"},{"size":845,"mtime":1692586724000,"results":"217","hashOfConfig":"156"},{"size":5411,"mtime":1695218843708,"results":"218","hashOfConfig":"156"},{"size":4682,"mtime":1702152678770,"results":"219","hashOfConfig":"156"},{"size":3703,"mtime":1701207470752,"results":"220","hashOfConfig":"156"},{"size":828,"mtime":1692586724000,"results":"221","hashOfConfig":"156"},{"size":668,"mtime":1692586724000,"results":"222","hashOfConfig":"156"},{"size":655,"mtime":1694468037392,"results":"223","hashOfConfig":"156"},{"size":4735,"mtime":1699067774024,"results":"224","hashOfConfig":"156"},{"size":1134,"mtime":1699067656820,"results":"225","hashOfConfig":"156"},{"size":1196,"mtime":1695653175281,"results":"226","hashOfConfig":"156"},{"size":241,"mtime":1692586724000,"results":"227","hashOfConfig":"156"},{"size":8762,"mtime":1701812997472,"results":"228","hashOfConfig":"156"},{"size":1656,"mtime":1692586724000,"results":"229","hashOfConfig":"156"},{"size":1079,"mtime":1692586724000,"results":"230","hashOfConfig":"156"},{"size":5552,"mtime":1692586724000,"results":"231","hashOfConfig":"156"},{"size":9180,"mtime":1701902225166,"results":"232","hashOfConfig":"156"},{"size":3279,"mtime":1699020887455,"results":"233","hashOfConfig":"156"},{"size":12146,"mtime":1701897023413,"results":"234","hashOfConfig":"156"},{"size":2684,"mtime":1692586724000,"results":"235","hashOfConfig":"156"},{"size":2243,"mtime":1692586724000,"results":"236","hashOfConfig":"156"},{"size":3807,"mtime":1692586724000,"results":"237","hashOfConfig":"156"},{"size":5732,"mtime":1695851377342,"results":"238","hashOfConfig":"156"},{"size":3660,"mtime":1692586724000,"results":"239","hashOfConfig":"156"},{"size":3809,"mtime":1701809001354,"results":"240","hashOfConfig":"156"},{"size":5613,"mtime":1702153268321,"results":"241","hashOfConfig":"156"},{"size":372,"mtime":1692586724000,"results":"242","hashOfConfig":"156"},{"size":327,"mtime":1692586724000,"results":"243","hashOfConfig":"156"},{"size":2506,"mtime":1699024250538,"results":"244","hashOfConfig":"156"},{"size":7906,"mtime":1699025763791,"results":"245","hashOfConfig":"156"},{"size":272,"mtime":1692586724000,"results":"246","hashOfConfig":"156"},{"size":3335,"mtime":1693864751553,"results":"247","hashOfConfig":"156"},{"size":1089,"mtime":1692586724000,"results":"248","hashOfConfig":"156"},{"size":163,"mtime":1692586724000,"results":"249","hashOfConfig":"156"},{"size":503,"mtime":1692586724000,"results":"250","hashOfConfig":"156"},{"size":101,"mtime":1692586724000,"results":"251","hashOfConfig":"156"},{"size":332,"mtime":1692586724000,"results":"252","hashOfConfig":"156"},{"size":1062,"mtime":1692586724000,"results":"253","hashOfConfig":"156"},{"size":1089,"mtime":1692586724000,"results":"254","hashOfConfig":"156"},{"size":4731,"mtime":1692586724000,"results":"255","hashOfConfig":"156"},{"size":2963,"mtime":1692586724000,"results":"256","hashOfConfig":"156"},{"size":4346,"mtime":1692586724000,"results":"257","hashOfConfig":"156"},{"size":2982,"mtime":1692586724000,"results":"258","hashOfConfig":"156"},{"size":1177,"mtime":1692586724000,"results":"259","hashOfConfig":"156"},{"size":709,"mtime":1692586724000,"results":"260","hashOfConfig":"156"},{"size":497,"mtime":1692586724000,"results":"261","hashOfConfig":"156"},{"size":3423,"mtime":1692586724000,"results":"262","hashOfConfig":"156"},{"size":2240,"mtime":1692586724000,"results":"263","hashOfConfig":"156"},{"size":931,"mtime":1692586724000,"results":"264","hashOfConfig":"156"},{"size":2655,"mtime":1701731554969,"results":"265","hashOfConfig":"156"},{"size":4139,"mtime":1692586724000,"results":"266","hashOfConfig":"156"},{"size":3078,"mtime":1692586724000,"results":"267","hashOfConfig":"156"},{"size":323,"mtime":1692586724000,"results":"268","hashOfConfig":"156"},{"size":538,"mtime":1692586724000,"results":"269","hashOfConfig":"156"},{"size":2004,"mtime":1692586724000,"results":"270","hashOfConfig":"156"},{"size":4258,"mtime":1692586724000,"results":"271","hashOfConfig":"156"},{"size":4771,"mtime":1692586724000,"results":"272","hashOfConfig":"156"},{"size":2224,"mtime":1692586724000,"results":"273","hashOfConfig":"156"},{"size":1932,"mtime":1692586724000,"results":"274","hashOfConfig":"156"},{"size":2097,"mtime":1692586724000,"results":"275","hashOfConfig":"156"},{"size":584,"mtime":1692586724000,"results":"276","hashOfConfig":"156"},{"size":587,"mtime":1692586724000,"results":"277","hashOfConfig":"156"},{"size":3771,"mtime":1701810418528,"results":"278","hashOfConfig":"156"},{"size":3353,"mtime":1692586724000,"results":"279","hashOfConfig":"156"},{"size":647,"mtime":1692586724000,"results":"280","hashOfConfig":"156"},{"size":1123,"mtime":1692586724000,"results":"281","hashOfConfig":"156"},{"size":684,"mtime":1692586724000,"results":"282","hashOfConfig":"156"},{"size":6264,"mtime":1697047794244,"results":"283","hashOfConfig":"156"},{"size":3944,"mtime":1692586724000,"results":"284","hashOfConfig":"156"},{"size":6378,"mtime":1701895469237,"results":"285","hashOfConfig":"156"},{"size":3322,"mtime":1698983795242,"results":"286","hashOfConfig":"156"},{"size":509,"mtime":1695835565234,"results":"287","hashOfConfig":"156"},{"size":1054,"mtime":1692586724000,"results":"288","hashOfConfig":"156"},{"size":5066,"mtime":1696009768777,"results":"289","hashOfConfig":"156"},{"size":1520,"mtime":1692586724000,"results":"290","hashOfConfig":"156"},{"size":1751,"mtime":1699029441610,"results":"291","hashOfConfig":"156"},{"size":407,"mtime":1692586724000,"results":"292","hashOfConfig":"156"},{"size":1126,"mtime":1692586724000,"results":"293","hashOfConfig":"156"},{"size":1153,"mtime":1692586724000,"results":"294","hashOfConfig":"156"},{"size":5087,"mtime":1701812601189,"results":"295","hashOfConfig":"156"},{"size":2926,"mtime":1692586724000,"results":"296","hashOfConfig":"156"},{"size":2531,"mtime":1692586724000,"results":"297","hashOfConfig":"156"},{"size":2047,"mtime":1692586724000,"results":"298","hashOfConfig":"156"},{"size":2942,"mtime":1692586724000,"results":"299","hashOfConfig":"156"},{"size":3815,"mtime":1692586724000,"results":"300","hashOfConfig":"156"},{"size":2515,"mtime":1692586724000,"results":"301","hashOfConfig":"156"},{"size":2740,"mtime":1692586724000,"results":"302","hashOfConfig":"156"},{"size":3113,"mtime":1692586724000,"results":"303","hashOfConfig":"156"},{"size":4462,"mtime":1692586724000,"results":"304","hashOfConfig":"156"},{"size":988,"mtime":1699067702818,"results":"305","hashOfConfig":"156"},{"size":1201,"mtime":1699067751808,"results":"306","hashOfConfig":"156"},{"size":1671,"mtime":1693231757054,"results":"307","hashOfConfig":"156"},{"size":6408,"mtime":1693331817925,"results":"308","hashOfConfig":"156"},{"size":2796,"mtime":1695824560887,"results":"309","hashOfConfig":"156"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"313"},"16qvnsj",{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"313"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"313"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"313"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"313"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"313"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"436"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"313"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"313"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"313"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"313"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"313"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"313"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"313"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"313"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"313"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"313"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"313"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"313"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"313"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"313"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"313"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"580","usedDeprecatedRules":"313"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"313"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"313"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"313"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"313"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"313"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"313"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"313"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"313"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"313"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"313"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"313"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"652"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},"/Users/mbuto/Downloads/Corner-master/Client/src/index.js",["655"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\nimport App from './App'\nimport { store, persistor } from './store.js'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {disableReactDevTools} from '@fvilers/disable-react-devtools'\n\nserviceWorker.register()\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n",["656","657"],"/Users/mbuto/Downloads/Corner-master/Client/src/store.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/serviceWorker.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/articlePageReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/authReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/courseReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/lectureCommentsReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/discussionReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/examReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/announcementsReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/lectureReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/assessmentTakingReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/gradebookReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/submissionsReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/assessmentCreationReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/moduleReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/participantsReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/assignmentReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/courseSettingsReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/achievementsReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/deadlinesReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/summaryGradebookReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/notificationsReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/articlesReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/reducers/calendarReducer.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/App/index.jsx",["658","659","660","661"],"import React, { useState, useEffect } from 'react'\nimport {\n  Route,\n  Switch,\n  Redirect,\n  useLocation,\n  matchPath\n} from 'react-router-dom'\nimport { Layout } from 'antd'\nimport { useDispatch } from 'react-redux'\nimport { getAllNotifications } from '../reducers/notificationsReducer'\nimport SideNav from '../components/SideNav'\nimport PublicRoute from '../components/PublicRoute'\nimport PrivateRoute from '../components/PrivateRoute'\n\nimport Login from '../pages/Login'\nimport NotFoundPage from '../pages/NotFoundPage'\nimport Registeration from '../pages/Registeration'\nimport ForgetPassword from '../pages/ForgetPassword'\nimport Courses from '../views/courses'\nimport Articles from '../views/articles'\nimport MyArticle from '../views/articles/myArticles/myArticles'\nimport MyBookMarks from '../views/articles/myBookMarks/myBookMarks'\nimport ArticlePage from '../views/ArticlePage'\nimport Profile from '../views/Profile'\nimport Exams from '../views/exams'\nimport { AssessmentCreation, Submissions } from '../views/exams'\nimport Lectures from '../views/lectures'\nimport Modules from '../views/modules'\nimport AssessmentTaking from '../views/assessmentTaking'\nimport DiscussionFeed from '../views/discussions'\nimport AnnouncementsFeed from '../views/announcements'\nimport Dashboard from '../views/dashboard'\nimport CourseCalendar from '../views/courseCalendar'\nimport GradeBook from '../views/gradeBook'\nimport NotFoundView from '../views/NotFoundView'\nimport Grader from '../views/assessmentGrading'\n\nimport 'antd/dist/antd.css'\nimport 'ant-design-pro/dist/ant-design-pro.css'\nimport S from './style'\n\nimport EmailVerify from '../components/EmailVerify'\nimport ResetPassword from '../components/ResetPassword'\nimport ForgotPassword from '../components/ForgotPassword'\nimport schoolRegistration from '../components/schoolRegistration'\nimport AdminApproval from '../components/AdminApproval'\nimport AccountVerification from '../components/AccountVerification'\nimport RegistrationConfirmation from '../components/RegistrationConfirmation';\nimport AppHeader from '../components/AppHeader'\nimport CourseParticipants from '../views/courseParticipants'\nimport Assignments from '../views/assignments'\nimport CourseSettings from '../views/courseSettings'\n//import Achievements from '../views/achievements'\nimport CourseRoute from '../components/CourseRoute'\nimport Archives from '../views/archives'\nimport FileUpload from  '../components/FileUpload'\n\n\n// public routes redirects to /app if authenticated\n// private routes redirects to login if not authenticated\nconst App = () => {\n  return (\n    <Switch>\n      <Route path=\"/Register\" component={Registeration} />     \n      \n      <PublicRoute path=\"/Login\" component={Login} />\n      <Route path=\"/users/:id/verify/:token\" component={EmailVerify} />\n      <Route path=\"/users/:id/registration/:token\" component={schoolRegistration} />\n      <Route path=\"/registration-confirmation\" component={RegistrationConfirmation} />\n      <Route path =\"/users/:id/approveAdmin\" component ={AdminApproval} />\n      <Route path=\"/account-verification\" component={AccountVerification} />\n      \n      <Route path=\"/forgot-password\" exact component={ForgotPassword} />\n        \n      <Route path=\"/users/:id/reset-password/:token\" component={ResetPassword} />\n      \n        \n\n      <PrivateRoute path=\"/app\" component={AuthnticatedApp} />\n      {/* future landing page redirect to app for now */}\n      <Route exact path=\"/\">\n        <Redirect to=\"/app\" />\n      </Route>\n      <Route path=\"*\" component={NotFoundPage} />\n    </Switch>\n  )\n}\n\n\nconst AuthnticatedApp = () => {\n  const [collapsed, setCollapsed] = useState(false)\n  const { Content } = Layout\n\n  const location = useLocation()\n\n  const onCollapse = (collapsed) => {\n    setCollapsed(collapsed)\n  }\n\n  const currentLocationIS = (pathToMatch) => {\n    const match = matchPath(location.pathname, pathToMatch)\n    if (!match) return false\n\n    return true\n  }\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getAllNotifications())\n  }, [dispatch])\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <SideNav collapsed={collapsed} onCollapse={onCollapse} />\n\n      <Layout\n        style={{\n          marginLeft: collapsed === true ? 80 : 200,\n          transition: 'margin-left .2s'\n        }}\n      >\n        <AppHeader courseNavigation={currentLocationIS('/app/course/:id')} />\n\n        <Content style={{ padding: '20px 32px', height: '100%' }}>\n          <Switch>\n          <Route path=\"/app/upload\" component={FileUpload} />\n            {/* redirect to courses page for now */}\n            <Route exact path=\"/app/\"> \n               <Redirect to=\"/app/courses\" />\n        \n            </Route>\n\n            <Route path=\"/app/dashboard\" component={Dashboard} />\n            <Route path=\"/app/calendar\" component={CourseCalendar} />\n\n            <Route path=\"/app/courses\" component={Courses} />\n            <CourseRoute\n              path=\"/app/course/:courseId/modules\"\n              component={Modules}\n            /> \n \n            <CourseRoute\n              path=\"/app/course/:courseId/assessment/:assessmentId/submissions\"\n              component={Submissions}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/assessment/:assessmentId/grade\"\n              component={Grader}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/exams/create\"\n              render={(props) => (\n                <AssessmentCreation {...props} assessmentType=\"Exam\" />\n              )}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/assignments/create\"\n              render={(props) => (\n                <AssessmentCreation {...props} assessmentType=\"Assignment\" />\n              )}\n            />\n            <CourseRoute path=\"/app/course/:courseId/exams\" component={Exams} /> \n            <CourseRoute\n              path=\"/app/course/:courseId/assignments\"\n              component={Assignments}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/lectures/:lectureId\"\n              component={Lectures}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/lectures\"\n              component={Lectures}\n            />\n\n            <CourseRoute\n              path=\"/app/course/:courseId/exam/:assessmentId\"\n              render={(props) => (\n                <AssessmentTaking {...props} assessmentType={'Exam'} />\n              )}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/assignment/:assessmentId\"\n              render={(props) => (\n                <AssessmentTaking {...props} assessmentType={'Assignment'} />\n              )}\n            />\n\n            <CourseRoute\n              path=\"/app/course/:courseId/discussions\"\n              render={(props) => (\n                <DiscussionFeed\n                  {...props}\n                  courseId={props.match.params.courseId}\n                />\n              )}\n            />\n             <CourseRoute\n              path=\"/app/course/:courseId/gradebook\"\n              render={(props) => (\n                <GradeBook {...props} courseId={props.match.params.courseId} />\n              )}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/announcments\"\n              render={(props) => (\n                <AnnouncementsFeed\n                  {...props}\n                  courseId={props.match.params.courseId}\n                />\n              )}\n            />\n            <CourseRoute\n              path=\"/app/course/:courseId/particpants\"\n              component={CourseParticipants}\n            />\n\n            <CourseRoute\n              path=\"/app/course/:courseId/settings\"\n              component={CourseSettings}\n            />\n\n            {/* <Route path=\"/app/articles/:id\" component={ArticlePage} /> */}\n            {/* <Route path=\"/app/articles\" component={Articles} /> */}\n            {/* <Route path=\"/app/myarticle\" component={MyArticle} /> */}\n            <Route path=\"/app/myBookMarks\" component={MyBookMarks} />\n            <Route path=\"/app/profile\" component={Profile} />\n            <Route path=\"/app/archives\" component={Archives} />\n            {/* <Route path=\"/app/acheivements\" component={Achievements} /> */}\n            <Route path=\"/app/*\" component={NotFoundView} />\n          </Switch>\n        </Content>\n        <S.Footer>Copyright ©2023 Corner</S.Footer>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","/Users/mbuto/Downloads/Corner-master/Client/src/subscription.js",["662"],"import axios from 'axios'\nimport { getAuthHeader } from './services/config'\n\nconst baseURL = '/notification'\n\nfunction urlBase64ToUint8Array(base64String) {\n    // eslint-disable-next-line\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nconst publicVapidKey=urlBase64ToUint8Array(\"\");\n\nfunction sendSubscription(subscription) {\n    console.log(subscription);\n  return axios.post(\n    `${baseURL}/subscribe`,\n    subscription,\n    getAuthHeader()\n  )\n}\n\nexport function subscribeUser() {\n    try{\n        if ('serviceWorker' in navigator) {\n            navigator.serviceWorker.ready.then(function(registration) {\n              if (!registration.pushManager) {\n                console.log('Push manager unavailable.')\n                return\n              }\n        \n              registration.pushManager.getSubscription().then(function(existedSubscription) {\n                if (existedSubscription === null) {\n                  console.log('No subscription detected, make a request.')\n                  registration.pushManager.subscribe({\n                    applicationServerKey: publicVapidKey,\n                    userVisibleOnly: true,\n                  }).then(function(newSubscription) {\n                    console.log('New subscription added.')\n                    sendSubscription(newSubscription)\n                  }).catch(function(e) {\n                    if (Notification.permission !== 'granted') {\n                      console.log('Permission was not granted.')\n                    } else {\n                      console.error('An error ocurred during the subscription process.', e)\n                    }\n                  })\n                } else {\n                  console.log('Existed subscription detected.')\n                  sendSubscription(existedSubscription)\n                }\n              })\n            })\n              .catch(function(e) {\n                console.error('An error ocurred during Service Worker registration.', e)\n              })\n          }\n    } catch(e){\n        console.log(e);\n    }\n}\n\nexport default subscribeUser;","/Users/mbuto/Downloads/Corner-master/Client/src/actions/articlePage.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/lecture.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/announcements.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/assessment.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/course.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/submissions.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/courseModules.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/notification.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/articles.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/checkModeration.js",["663"],"import axios from 'axios'\n\nconst check = async (text) => {\n  console.log(text)\n  try {\n    const response = await axios.post(\n      '',\n      { body: text }\n    )\n    const res = response.data\n    if (res == \"1\") {\n      return false\n    } else {\n      return true\n    }\n  } catch (error) {\n    console.log(error)\n    return true\n  }\n}\n\nconst checkModerationService = { check }\n\nexport default checkModerationService\n","/Users/mbuto/Downloads/Corner-master/Client/src/services/article.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/users.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/courses.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/lectures.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/announcements.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/discussion.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/gradebook.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/submissions.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/assessmentTaking.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/auth.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/s3Service.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/assessments.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/achievements.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/deadlines.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/notifications.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/actions/discussion.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/enrollment.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/services/courseModules.js",["664"],"import axios from 'axios'\nimport { getAuthHeader,getMultiPartAuthHeader } from './config'\n\nimport { baseURL as coursesURL } from './courses'\n\nconst baseURL = '/modules'\n\nconst getModulesURL = (courseId, moduleId) => {\n  if (!moduleId) return `${coursesURL}/${courseId}${baseURL}`\n  return `${coursesURL}/${courseId}${baseURL}/${moduleId}`\n}\n\nconst getModuleItemsURL = (courseId, moduleId, moduleItemId) => {\n  if (!moduleItemId)\n    return `${coursesURL}/${courseId}${baseURL}/${moduleId}/module-item`\n  return `${coursesURL}/${courseId}${baseURL}/${moduleId}/module-item/${moduleItemId}`\n}\n\n\nconst getAllModules = async (courseId) => {\n  const response = await axios.get(getModulesURL(courseId))\n  return response.data.modules\n}\n\nconst createModule = async (courseId, module) => {\n  const response = await axios.post(\n    getModulesURL(courseId),\n    module,\n    getAuthHeader()\n  )\n  return response.data.modules\n}\n\nconst updateModule = async (courseId, moduleId, module) => {\n  const response = await axios.put(\n    getModulesURL(courseId, moduleId),\n    module,\n    getAuthHeader()\n  )\n  return response.data.modules\n}\n\nconst deleteModule = async (courseId, moduleId) => {\n  const response = await axios.delete(\n    getModulesURL(courseId, moduleId),\n    getAuthHeader()\n  )\n  return response.data.modules\n}\n\nconst createModuleItem = async (courseId, moduleId, moduleItem) => {\n  const response = await axios.post(\n    getModuleItemsURL(courseId, moduleId),\n    moduleItem,\n    getAuthHeader()\n  )\n  return response.data.modules\n}\n\n// const uploadModuleItem = async (courseId, moduleId, moduleItem) => {\n//   const response = await axios.post(\n//     getModuleItemsURL(courseId, moduleId),\n//     moduleItem,\n//     getMultiPartAuthHeader()\n    \n//   )\n//   return response.data.modules\n// }\n\nconst deleteModuleItem = async (courseId, moduleId, moduleItemId) => {\n  const response = await axios.delete(\n    getModuleItemsURL(courseId, moduleId, moduleItemId),\n    getAuthHeader()\n  )\n  return response.data.modules\n}\n\nconst moduleService = {\n  getAllModules,\n  \n  createModule,\n  updateModule,\n  deleteModule,\n  createModuleItem,\n  deleteModuleItem\n}\nexport default moduleService\n","/Users/mbuto/Downloads/Corner-master/Client/src/services/config.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/App/style.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/archives/index.jsx",["665"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { List, Typography } from 'antd'\n\nimport Spinner from '../../components/Spinner'\nimport CourseCard from '../../components/CourseCard'\nimport { useHistory } from 'react-router-dom'\nimport { getAllCourses } from '../../reducers/courseReducer'\n\nconst { Title } = Typography\n\nconst Archives = (props) => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const archivedCourses = useSelector((state) =>\n    state.courses.data.filter((course) => course.status === 'archived')\n  )\n  const loading = useSelector((state) => state.courses.loading)\n\n  useEffect(() => {\n    dispatch(getAllCourses())\n  }, [])\n\n  if (loading) return <Spinner size=\"large\" />\n\n  return (\n    <>\n      <Title level={3}>Archives</Title>\n      <List\n        grid={{\n          gutter: 24,\n          column: 3,\n          xs: 1,\n          sm: 2,\n          xxl: 5\n        }}\n        dataSource={archivedCourses}\n        renderItem={(course) => (\n          <List.Item>\n            <CourseCard\n              course={course}\n              disableEnroll\n              onClick={() => history.push(`/app/course/${course.id}/discussions`)}\n            />\n          </List.Item>\n        )}\n      />\n    </>\n  )\n}\n\nexport default Archives\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/achievements/index.jsx",["666","667","668"],"import { Typography, Table, Avatar } from 'antd'\nimport { DateTime } from 'luxon'\nimport React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport Spinner from '../../components/Spinner'\nimport { getAllAchievements } from '../../reducers/achievementsReducer'\nimport { FlexSectionHeader } from '../style'\n\nconst { Title } = Typography\nconst { Column } = Table\n\nconst Achievements = (props) => {\n  const dispatch = useDispatch()\n\n  const achievements = useSelector((state) => state.achievements.data)\n  const loading = useSelector((state) => state.achievements.loading)\n\n  useEffect(() => {\n    dispatch(getAllAchievements())\n  }, [])\n\n  if (loading) return <Spinner size=\"large\" />\n\n  return (\n    <>\n      <Title level={3}>Achievements</Title>\n\n      <Table\n        pagination={false}\n        style={{ marginTop: '24px' }}\n        rowKey={(achievement) => achievement.id}\n        dataSource={achievements}\n      >\n        <Column\n          title=\"Photo\"\n          dataIndex={['user', 'photo']}\n          render={(img) => <Avatar src={img} />}\n        />\n        <Column title=\"Course Name\" dataIndex={['course', 'name']} />\n        <Column\n          title=\"Finished At\"\n          dataIndex=\"finishedAt\"\n          render={(time) => {\n            if (!time) return '-'\n            else\n              return DateTime.fromISO(time).toLocaleString(\n                DateTime.DATETIME_MED\n              )\n          }}\n        />\n\n        <Column\n          title=\"Grade\"\n          dataIndex=\"gradeLetter\"\n          render={(grade) => {\n            if (!grade) return '-'\n            else return grade\n          }}\n        />\n        <Column\n          title=\"Certificate\"\n          dataIndex=\"certificate\"\n          render={(certificate) => {\n            if (!certificate) return '-'\n            else return <a href={`${certificate}`}>certificate</a>\n          }}\n        />\n      </Table>\n    </>\n  )\n}\n\nexport default Achievements\n",["669","670"],"/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/myBookMarks/myBookMarks.jsx",["671","672"],"import { Card, Button, Modal, Form, Input } from 'antd'\nimport Avatar from 'antd/lib/avatar/avatar'\nimport Meta from 'antd/lib/card/Meta'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  deleteArticle,\n  getMyBookMarks,\n  create_article\n} from '../../../reducers/articlesReducer'\n\nimport { DeleteFilled } from '@ant-design/icons'\n\nimport Styles from '../index.module.css'\nconst { TextArea } = Input\nconst MyBookMarks = () => {\n  let dispatch = useDispatch()\n  const [modalVisible, setModalVisible] = useState(false)\n  const [load, loading] = useState(2)\n  const [form] = Form.useForm()\n  const handleCancel = () => {\n    setModalVisible(false)\n  }\n\n  const onFinish = (values) => {\n    let Article = {\n      text: values.articleBody,\n      title: values.articleTitle,\n      url: values.url\n    }\n    dispatch(create_article(Article))\n    setModalVisible(false)\n  }\n  function handleClick() {\n    setModalVisible(true)\n  }\n\n  useEffect(() => {\n    dispatch(getMyBookMarks())\n  }, [dispatch])\n\n  const result = useSelector((state) => state.articles)\n  const articleData = result?.articles\n  const history = useHistory()\n\n  return (\n    <>\n      {console.log('my articles')}\n      <div className={Styles['articles-wrapper']}>\n        <div className={Styles['article-title-container']}>\n          <h2>Your BookMarks</h2>\n          <div className={Styles['article-title-container']}>\n            <Button\n              shape=\"round\"\n              type=\"secondary\"\n              onClick={() => {\n                history.push(`/app/myarticle`)\n              }}\n            >\n              My Articles\n            </Button>\n            <Button shape='round' type=\"primary\" onClick={handleClick}>\n              New Article\n            </Button>\n\n            <Modal\n              title=\"Add New Article\"\n              visible={modalVisible}\n              onOk={form.submit}\n              onCancel={handleCancel}\n              footer={[\n                <Button key=\"cancel\" onClick={handleCancel}>\n                  Cancel\n                </Button>,\n                <Button key=\"submit\" type=\"primary\" onClick={form.submit}>\n                  Submit\n                </Button>\n              ]}\n            >\n              <Form\n                form={form}\n                name=\"normal_login\"\n                className=\"login-form\"\n                onFinish={onFinish}\n              >\n                <Form.Item\n                  name=\"articleTitle\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input your Article Title!'\n                    }\n                  ]}\n                >\n                  <Input type=\"text\" placeholder=\"ArticleTitle\" />\n                </Form.Item>\n                <Form.Item\n                  name=\"articleBody\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input your article body!'\n                    }\n                  ]}\n                >\n                  <TextArea\n                    type=\"text\"\n                    placeholder=\"article body\"\n                    autoSize={{ minRows: 5, maxRows: 6 }}\n                  />\n                </Form.Item>\n                <Form.Item name=\"url\">\n                  <Input type=\"text\" placeholder=\"article url\" />\n                </Form.Item>\n              </Form>\n            </Modal>\n          </div>\n        </div>\n        {articleData?.map((article, index) => (\n          <MyArticleCard key={index} article={article} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nconst MyArticleCard = ({ article }) => {\n  const history = useHistory()\n  let dispatch = useDispatch()\n\n  const clickDelete = () => {\n    return dispatch(deleteArticle(article.id))\n  }\n\n  const viewArticle = () => {\n    history.push(`/app/articles/${article.id}`)\n  }\n  const user = useSelector((state) => state.auth.user)\n\n  return (\n    <div className={Styles['article-card-container']}>\n      <Card hoverable className=\"article-card\" onClick={viewArticle}>\n        <Meta\n          avatar={<Avatar src={article?.authorPersonId?.photo} />}\n          title={article?.authorPersonId?.name || user.name}\n          description={article?.title}\n        />\n\n        <p>{article?.text}</p>\n        {user?._id ===\n          (article?.authorPersonId?._id || article?.authorPersonId) && (\n          <Button\n            type=\"icon\"\n            className={Styles['iconButton']}\n            onClick={clickDelete}\n          >\n            <DeleteFilled />\n          </Button>\n        )}\n        {/*<Button\n          type=\"text\"\n          onClick={viewArticle}\n          className={Styles['viewButton']}\n        >\n          {' '}\n          view{' '}\n        </Button>*/}\n      </Card>\n    </div>\n  )\n}\n\nexport default MyBookMarks\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/myArticles/myArticles.jsx",["673","674","675"],"import { Card, Button, Modal, Form, Input } from 'antd'\nimport Avatar from 'antd/lib/avatar/avatar'\nimport Meta from 'antd/lib/card/Meta'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  deleteArticle,\n  getMyArticles,\n  create_article\n} from '../../../reducers/articlesReducer'\n\nimport { DeleteFilled } from '@ant-design/icons'\n\nimport Styles from '../index.module.css'\nconst { TextArea } = Input\nconst MyArticle = () => {\n  let dispatch = useDispatch()\n  const [modalVisible, setModalVisible] = useState(false)\n  const [load, loading] = useState(2)\n  const [form] = Form.useForm()\n  const handleCancel = () => {\n    setModalVisible(false)\n  }\n\n  const onFinish = (values) => {\n    let Article = {\n      text: values.articleBody,\n      title: values.articleTitle,\n      url: values.url\n    }\n    dispatch(create_article(Article))\n    setModalVisible(false)\n  }\n  function handleClick() {\n    setModalVisible(true)\n  }\n\n  const user = useSelector((state) => state.auth.user)\n  useEffect(() => {\n    dispatch(getMyArticles(user.username))\n  }, [dispatch])\n\n  const result = useSelector((state) => state.articles)\n  const articleData = result?.articles\n  const history = useHistory()\n\n  return (\n    <>\n      {console.log('my articles')}\n      <div className={Styles['articles-wrapper']}>\n        <div className={Styles['article-title-container']}>\n          <h2>Your Articles</h2>\n          <div className={Styles['article-title-container']}>\n            <Button\n              type=\"secondary\"\n              shape=\"round\"\n              onClick={() => {\n                history.push(`/app/myBookMarks`)\n              }}\n            >\n              My BookMarks\n            </Button>\n            <Button shape=\"round\" type=\"primary\" onClick={handleClick}>\n              New Article\n            </Button>\n\n            <Modal\n              title=\"Add New Article\"\n              visible={modalVisible}\n              onOk={form.submit}\n              onCancel={handleCancel}\n              footer={[\n                <Button key=\"cancel\" onClick={handleCancel}>\n                  Cancel\n                </Button>,\n                <Button key=\"submit\" type=\"primary\" onClick={form.submit}>\n                  Submit\n                </Button>\n              ]}\n            >\n              <Form\n                form={form}\n                name=\"normal_login\"\n                className=\"login-form\"\n                onFinish={onFinish}\n              >\n                <Form.Item\n                  name=\"articleTitle\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input your Article Title!'\n                    }\n                  ]}\n                >\n                  <Input type=\"text\" placeholder=\"ArticleTitle\" />\n                </Form.Item>\n                <Form.Item\n                  name=\"articleBody\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input your article body!'\n                    }\n                  ]}\n                >\n                  <TextArea\n                    type=\"text\"\n                    placeholder=\"article body\"\n                    autoSize={{ minRows: 5, maxRows: 6 }}\n                  />\n                </Form.Item>\n                <Form.Item name=\"url\">\n                  <Input type=\"text\" placeholder=\"article url\" />\n                </Form.Item>\n              </Form>\n            </Modal>\n          </div>\n        </div>\n        {articleData?.map((article, index) => (\n          <MyArticleCard key={index} article={article} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nconst MyArticleCard = ({ article }) => {\n  const history = useHistory()\n  let dispatch = useDispatch()\n\n  const clickDelete = () => {\n    return dispatch(deleteArticle(article.id))\n  }\n\n  const viewArticle = () => {\n    history.push(`/app/articles/${article.id}`)\n  }\n  const user = useSelector((state) => state.auth.user)\n\n  return (\n    <div className={Styles['article-card-container']}>\n      <Card hoverable className=\"article-card\" onClick={viewArticle}>\n        <Meta\n          avatar={<Avatar src={article?.authorPersonId?.photo} />}\n          title={article?.authorPersonId?.name || user.name}\n          description={article?.title}\n        />\n\n        <p>{article?.text}</p>\n        {user?._id ===\n          (article?.authorPersonId?._id || article?.authorPersonId) && (\n          <Button\n            type=\"icon\"\n            className={Styles['iconButton']}\n            onClick={clickDelete}\n          >\n            <DeleteFilled />\n          </Button>\n        )}\n        {/*<Button\n          type=\"text\"\n          onClick={viewArticle}\n          className={Styles['viewButton']}\n        >\n          {' '}\n          view{' '}\n        </Button>*/}\n      </Card>\n    </div>\n  )\n}\n\nexport default MyArticle\n","/Users/mbuto/Downloads/Corner-master/Client/src/components/CourseRoute/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/courseSettings/index.jsx",["676","677","678"],"import React, { useEffect, useRef, useState } from 'react'\n\nimport { Row, Col, Image, Form, Input, Typography, Divider, Button, Select } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  endCourse,\n  getOneCourse,\n  updateCourse\n} from '../../reducers/courseSettingsReducer'\nimport { useHistory, useParams } from 'react-router-dom'\nimport Spinner from '../../components/Spinner'\n\nimport { CompactPicker } from 'react-color'\n\nimport { UserOutlined } from '@ant-design/icons'\n\nconst { Title, Text } = Typography\n\nconst CourseSettings = (props) => {\n  const dispatch = useDispatch()\n  const { courseId } = useParams()\n  const history = useHistory()\n\n  const [courseImage, setCourseImage] = useState(null)\n\n  const [form] = Form.useForm()\n\n  const course = useSelector((state) => state.courseSettings.data)\n  const loading = useSelector((state) => state.courseSettings.loading)\n\n  useEffect(() => {\n    dispatch(getOneCourse(courseId))\n  }, [])\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: course.name,\n      description: course.description,\n      backgroundColor: course.backgroundColor,\n      university:course.university,\n      image: course.image\n    })\n    setCourseImage(course.image || null)\n  }, [course])\n\n  const handleSubmit = (values) => {\n     dispatch(updateCourse(courseId, values))\n  }\n\n  const handleCourseEnd = () => {\n    dispatch(endCourse(courseId)).then(() => history.push('/app/courses'))\n  }\n\n  if (loading) return <Spinner size=\"large\" />\n\n  const handleChangeImage = (event) => {\n    console.log(event.target.value)\n    setCourseImage(event.target.value)\n  }\n\n  const getColor = (event) => {\n    console.log(event)\n    return event.hex\n  }\n\n  return (\n    <Form onFinish={handleSubmit} form={form} layout=\"vertical\">\n      <Row gutter={[48, 16]}>\n        <Col span={8}>\n          <Image placeholder={true} width={530} src={courseImage} />\n          <Form.Item\n            label={\n              <Title style={{ marginBottom: '0', marginTop: '8px' }} level={5}>\n                Course Image\n              </Title>\n            }\n            name=\"image\"\n            onChange={handleChangeImage}\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={16}>\n          <div\n            style={{\n              backgroundColor: '#fafafa',\n              height: 'auto',\n              borderRadius: '10px',\n              padding: '36px'\n            }}\n          >\n            <Title level={3} style={{ marginBottom: '24px' }}>\n              Settings\n            </Title>\n            <Divider />\n            <Form.Item wrapperCol={{ span: 8 }} label=\"Course Name\" name=\"name\">\n              <Input placeholder=\"Course Name\" />\n            </Form.Item>\n            <Form.Item wrapperCol={{ span: 8 }} label=\"Course University\" name=\"university\">\n              {/* <Input placeholder=\"Course University\" /> */}\n              <Select prefix={<UserOutlined />} placeholder=\"Course University\">\n                <Select.Option value=\"UR-BUSOGO\">UR-BUSOGO</Select.Option>\n                    <Select.Option value=\"UR-HUYE\">UR-HUYE</Select.Option>\n                    <Select.Option value=\"UR-REMERA\">UR-REMERA</Select.Option>\n                    <Select.Option value=\"UR-NYARUGENGE\">UR-NYARUGENGE</Select.Option>\n                    <Select.Option value=\"UR-RUKARA\">UR-RUKARA</Select.Option>\n                    <Select.Option value=\"UR-RUSIZI\">UR-RUSIZI</Select.Option>\n                    <Select.Option value=\"UR-GIKONDO\">UR-GIKONDO</Select.Option>\n                    <Select.Option value=\"AUKA\">AUKA</Select.Option>\n                    <Select.Option value=\"KEPLER\">KEPLER</Select.Option>\n                    <Select.Option value=\"INES\">INES</Select.Option>\n                    <Select.Option value=\"UK\">UK</Select.Option>\n                    <Select.Option value=\"UNILAK\">UNILAK</Select.Option>\n                    <Select.Option value=\"ULK\">ULK</Select.Option>\n                \n              </Select>\n            </Form.Item>\n            <Form.Item\n              wrapperCol={{ span: 12 }}\n              label=\"Course Description\"\n              name=\"description\"\n            >\n              <Input.TextArea\n                autoSize={{ minRows: 3, maxRows: 6 }}\n                placeholder=\"Course Description\"\n                allowClear\n              />\n            </Form.Item>\n            <Form.Item\n              getValueFromEvent={getColor}\n              label=\"Background Color\"\n              name=\"backgroundColor\"\n              valuePropName=\"color\"\n            >\n              <CompactPicker />\n            </Form.Item>\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Save\n              </Button>\n            </Form.Item>\n            <Divider />\n            <Title\n              style={{ color: 'firebrick', marginBottom: '24px' }}\n              level={3}\n            >\n              Finalize Course\n            </Title>\n\n            <Text strong>\n              If you end the course the current grades will be saved and the\n              course will be archived\n            </Text>\n            <div style={{ marginTop: '16px' }}>\n              <Button type=\"primary\" danger onClick={handleCourseEnd}>\n                End Course\n              </Button>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nexport default CourseSettings\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/assignments/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/courseParticipants/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/RegistrationConfirmation/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/AppHeader/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/AccountVerification/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/schoolRegistration/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/EmailVerify/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/AdminApproval/index.jsx",["679"],"// AdminApproval.jsx\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport success from \"../../images/success.png\";\nimport styles from \"./styles.module.css\";\nimport { Fragment } from \"react/cjs/react.production.min\";\n\n//import { Button } from 'antd';\n\nconst AdminApproval = () => {\n\tconst [validUrl, setValidUrl] = useState(true);\n\tconst param = useParams();\n\n\tuseEffect(() => {\n\t\tconst handleAdminApproval = async () => {\n\t\t\ttry {\n\t\t\t\tconst url = `http://localhost:4000/users/${param.id}/approveAdmin`;\n\t\t\t\tconst { data } = await axios.get(url);\n\t\t\t\t//console.log(data);\n\t\t\t\tsetValidUrl(true);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tsetValidUrl(false);\n\t\t\t}\n\t\t};\n\t\thandleAdminApproval();\n\t}, [param]);\n\n    \n\n  return (\n\t<Fragment>\n\t\t\t{validUrl ? (\n\t\t\t\t<div className={styles.container}>\n\t\t\t\t\t<img src={success} alt=\"success_img\" className={styles.success_img} />\n\t\t\t\t\t<h1>Admin approved successfully</h1>\n\t\t\t\t\t{/* <Link to=\"/login\">\n\t\t\t\t\t\t<button className={styles.green_btn}>Login</button>\n\t\t\t\t\t</Link> */}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h1>404 Not Found</h1>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\nexport default AdminApproval;\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/NotFoundView/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/index.jsx",["680","681"],"import {\n  Affix,\n  Button,\n  Divider,\n  Form,\n  Space,\n  Col,\n  Row,\n  Typography,\n  Empty,\n  InputNumber\n} from 'antd'\n\nimport React, { useEffect, useState } from 'react'\n\nimport { ArrowLeftOutlined, ArrowRightOutlined } from '@ant-design/icons'\nimport { DateTime } from 'luxon'\nimport PlagarismTag from '../../components/PlagarismTag'\nimport GradingQuestionList from './components/GradingQuestionList'\nimport AutoGradingTag from '../../components/AutoGradingTag'\nimport SubmissionTimeTag from '../../components/SubmissionTimeTag'\n\nimport Styled from 'styled-components'\nimport FileDisplay from './components/FileDispaly'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation, useParams } from 'react-router'\nimport {\n  getAllSubmissions,\n  gradeQuestions\n} from '../../reducers/submissionsReducer'\nimport Spinner from '../../components/Spinner'\nimport { useHistory } from 'react-router-dom'\n\nconst { Text, Title } = Typography\n\nconst Container = Styled.div`\n    background-color: #fafafa;\n    width: 95%;\n    margin: 0 auto;\n    border-radius: 10px;\n    padding: 20px 20px;\n`\n\nconst Grader = () => {\n  const dispatch = useDispatch()\n\n  const { courseId, assessmentId } = useParams()\n\n  const data = useSelector((state) => state.submissions.data)\n  const loading = useSelector((state) => state.submissions.loading)\n  const { assessment, submissions } = data || {}\n\n  useEffect(() => {\n    dispatch(getAllSubmissions(courseId, assessmentId))\n  }, [courseId, assessmentId])\n\n  if (loading) return <Spinner size=\"large\" />\n\n  if (!submissions || (Array.isArray(submissions) && submissions.length === 0))\n    return <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n\n  return <GradingPage submissions={submissions} assessment={assessment} />\n}\n\nconst FileView = ({ files }) => {\n  const [selectedFileURL, setselectedFileURL] = useState('')\n\n  const selectFile = (url) => {\n    setselectedFileURL(url)\n  }\n\n  const getPdfUrl = (files) => {\n    for (const file of files) {\n      const index = file.url.lastIndexOf('.')\n      if (file.url.slice(index + 1) === 'pdf') return file.url\n    }\n    return ''\n  }\n\n  useEffect(() => {\n    setselectedFileURL(getPdfUrl(files))\n  }, [files])\n\n  return (\n    <>\n      <FileDisplay files={files} handleClick={selectFile} />\n      <embed\n        title=\"test\"\n        src={`${selectedFileURL}`}\n        style={{ width: '100%', height: '680px', marginTop: '16px' }}\n        frameBorder=\"0\"\n      ></embed>\n    </>\n  )\n}\n\nconst GradingPage = (props) => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const { state } = useLocation()\n  const { courseId, assessmentId } = useParams()\n  const { submissions, assessment } = props\n\n  const [form] = Form.useForm()\n\n  const [selectedIndex, setSelectedIndex] = useState(state?.index || 0)\n\n  useEffect(() => {\n    form.resetFields()\n  }, [selectedIndex])\n\n  const calculateTotalScore = (answers) => {\n    let totalScore = 0\n    for (const answer of answers) {\n      totalScore += answer?.score || 0\n    }\n    return totalScore\n  }\n\n  const handleScoreCalculation = (changedValues, allValues) => {\n    const answers = allValues?.answers\n    if (\n      answers &&\n      answers.length !== 0 &&\n      assessment.questionsType === 'online'\n    ) {\n      let totalScore = calculateTotalScore(answers)\n      form.setFieldsValue({ score: totalScore })\n    }\n  }\n\n  const handleSubmit = (submission) => {\n    console.log(submission)\n\n    dispatch(\n      gradeQuestions(\n        courseId,\n        assessmentId,\n        submissions[selectedIndex].student._id,\n        submission\n      )\n    ).then(() => {\n      if (submissions.length - 1 !== selectedIndex)\n        setSelectedIndex(selectedIndex + 1)\n    })\n  }\n\n  const getInitialScore = () => {\n    if (submissions[selectedIndex].score)\n      return submissions[selectedIndex].score\n    else return calculateTotalScore(submissions[selectedIndex].answers)\n  }\n\n  return (\n    <Form\n      onValuesChange={handleScoreCalculation}\n      form={form}\n      initialValues={{\n        score: getInitialScore()\n      }}\n      onFinish={handleSubmit}\n      layout=\"vertical\"\n    >\n      <Row gutter={[16, 16]}>\n        <Col span={18}>\n          <Container>\n            <Title level={3}>\n              {assessment.title} <Text type=\"secondary\">submission</Text>{' '}\n              {selectedIndex + 1} <Text type=\"secondary\">out of</Text>{' '}\n              {submissions.length}\n            </Title>\n            <Divider />\n            {assessment.questionsType === 'online' && (\n              <GradingQuestionList\n                form={form}\n                answers={submissions[selectedIndex].answers}\n                submissionId={submissions[selectedIndex].id}\n              />\n            )}\n            {assessment.submissionType === 'written' && (\n              <FileView files={submissions[selectedIndex].files} />\n            )}\n          </Container>\n        </Col>\n\n        <Col span={6}>\n          <Affix offsetTop={10}>\n            <div\n              style={{\n                backgroundColor: 'white',\n                padding: '20px 20px',\n                borderRadius: '10px'\n              }}\n            >\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <Space>\n                  <Button\n                    type=\"text\"\n                    icon={<ArrowLeftOutlined />}\n                    onClick={() => setSelectedIndex(selectedIndex - 1)}\n                    disabled={selectedIndex === 0}\n                  ></Button>\n                  <Text>{submissions[selectedIndex].student?.name}</Text>\n                  <Button\n                    type=\"text\"\n                    icon={<ArrowRightOutlined />}\n                    onClick={() => setSelectedIndex(selectedIndex + 1)}\n                    disabled={submissions.length - 1 === selectedIndex}\n                  ></Button>\n                </Space>\n              </div>\n              <Divider />\n\n              <Space size=\"large\" direction=\"vertical\">\n                <Text>\n                  Submission Time:{' '}\n                  {DateTime.fromISO(\n                    submissions[selectedIndex].submittedAt\n                  ).toLocaleString(DateTime.DATETIME_MED)}\n                </Text>\n                {assessment.submissionType === 'written' && (\n                  <Space>\n                    <Text>Plagarism Degree: </Text>\n                    <PlagarismTag\n                      status={submissions[selectedIndex].plagarismStatus}\n                    />\n                  </Space>\n                )}\n                {assessment?.questionsType === 'online' && (\n                  <Space>\n                    <Text>AutoGrading Status: </Text>\n                    <AutoGradingTag\n                      status={submissions[selectedIndex].autoGradingStatus}\n                    />\n                  </Space>\n                )}\n                {assessment?.type === 'Assignment' && (\n                  <Space>\n                    <Text>Submit Status: </Text>\n                    <SubmissionTimeTag\n                      status={submissions[selectedIndex].status}\n                    />\n                  </Space>\n                )}\n                {assessment.type === 'Exam' && (\n                  <Text>\n                    Number of Joins:{' '}\n                    {submissions[selectedIndex].numberOfExamJoins}\n                  </Text>\n                )}\n                <Form.Item\n                  initialValue={submissions[selectedIndex].score}\n                  label={`Total Score out of ${assessment.maxScore}:`}\n                  name=\"score\"\n                  preserve={false}\n                  rules={\n                    assessment.submissionType === 'written' && [\n                      { required: true }\n                    ]\n                  }\n                >\n                  <InputNumber\n                    disabled={assessment.submissionType === 'online'}\n                    style={{ width: '30%' }}\n                    min={0}\n                    max={assessment.maxScore}\n                  ></InputNumber>\n                </Form.Item>\n                <Text> </Text>\n              </Space>\n              <Space style={{ marginTop: '26px' }}>\n                <Button type=\"primary\" onClick={() => form.submit()}>\n                  Grade\n                </Button>\n                <Button\n                  onClick={() =>\n                    history.push(\n                      `/app/course/${courseId}/${assessment.type.toLowerCase()}s`\n                    )\n                  }\n                >\n                  Cancel\n                </Button>\n              </Space>\n            </div>\n          </Affix>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nexport default Grader\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/courseCalendar/index.jsx",["682"],"import React from 'react'\nimport { Calendar, Badge, Typography } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useEffect } from 'react'\nimport { getAllCalendarEvents } from '../../reducers/calendarReducer'\nimport Spinner from '../../components/Spinner'\nimport { DateTime } from 'luxon'\n\nimport './index.css'\n\nconst { Title } = Typography\n\nconst CourseCalendar = () => {\n  const dispatch = useDispatch()\n\n  const calendarEvents = useSelector((state) => state.calendar.data)\n  const loading = useSelector((state) => state.calendar.loading)\n\n  useEffect(() => {\n    dispatch(getAllCalendarEvents())\n  }, [])\n\n  function getListData(value) {\n    const day = value.date()\n    const month = value.month()\n    const year = value.year()\n\n    const listData = calendarEvents?.[year]?.[month + 1]?.[day] || []\n    return listData\n  }\n\n  function dateCellRender(value) {\n    const listData = getListData(value)\n    return (\n      <ul className=\"events\">\n        {listData.map((item) => (\n          <li key={item.assessmentId}>\n            <Badge\n              style={{ fontSize: '6px' }}\n              status={item.type === 'Exam' ? 'error' : 'warning'}\n              text={`${item.title} at ${DateTime.fromISO(\n                item.deadline\n              ).toLocaleString(DateTime.TIME_SIMPLE)}`}\n            />\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  if (loading) return <Spinner size=\"large\" />\n\n  return (\n    <>\n      <Title level={3}>Calendar</Title>\n      <Calendar\n        style={{ padding: '0 20px', marginTop: '16px' }}\n        dateCellRender={dateCellRender}\n      />\n    </>\n  )\n}\n\nexport default CourseCalendar\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/index.jsx",["683","684"],"import StudentGradeBook from './components/studentGB'\nimport InstructorGradeBook from './components/instructorGB'\nimport './styles.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport React, { useState, useEffect } from 'react'\nimport { getSummaryOfCourse } from '../../reducers/summaryGradebookReducer'\nimport { getSubsOfCourse } from '../../reducers/gradebookReducer'\nimport useCoursePrivilege from '../../hooks/useCourseprivilege'\n\nconst GradeBook = ({ courseId }) => {\n  const { privilege } = useCoursePrivilege()\n  const dispatch = useDispatch()\n\n  const user = useSelector((state) => state.auth.user)\n\n  useEffect(() => {\n    dispatch(getSummaryOfCourse(courseId))\n    if (privilege === 'instructor') {\n      dispatch(getSubsOfCourse(courseId))\n    }\n  }, [dispatch, courseId])\n\n  return (\n    <>\n      {privilege === 'student' && (\n        <StudentGradeBook courseId={courseId} id={user._id} />\n      )}\n      {privilege === 'instructor' && (\n        <InstructorGradeBook courseId={courseId} id={user._id} />\n      )}\n    </>\n  )\n}\n\nexport default GradeBook\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/dashboard/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/announcements/index.jsx",["685"],"import AnnouncementCard from './components/announcementCard'\nimport styles from './styles.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport React, { useState, useEffect } from 'react'\nimport { Button, Input } from 'antd'\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css'; // Import styles\n\nimport {\n  addAnnouncement,\n  getAllAnnouncements\n} from '../../reducers/announcementsReducer'\nimport useCoursePrivilege from '../../hooks/useCourseprivilege'\n\nconst Feed = ({ announcements, user }) => {\n  return announcements.map((ann) => {\n    return (\n      <AnnouncementCard\n        key={ann._id}\n        announcement={ann}\n        user={user}\n        styles={styles}\n      />\n    )\n  })\n}\n\nconst AnnouncementsFeed = ({ courseId }) => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(getAllAnnouncements(courseId))\n  }, [dispatch, courseId])\n  const user = useSelector((state) => state.auth.user)\n  const announcements = useSelector((state) => state.announcements)\n  const [annText, setAnnText] = useState('')\n  const [title, setTitle] = useState('')\n  \n  \n  const setEditorHtml = (html) => {\n    setAnnText(html);\n  };\n  const { privilege } = useCoursePrivilege()\n\n  \n  const onPost = () => {\n    if (annText !== '') {\n      dispatch(addAnnouncement(courseId, annText,title))\n      //dispatch(addAnnouncement(courseId, editorHtml, title));\n      setAnnText('')\n      setTitle('')\n      \n    } else console.log('cannot post empty post')\n  }\n//   if (editorHtml!== '') {\n//     // dispatch(addAnnouncement(courseId, annText,title))\n//      dispatch(addAnnouncement(courseId, editorHtml, title));\n//      //setAnnText('')\n//      setTitle('')\n//      setEditorHtml('');\n//    } else console.log('cannot post empty post')\n//  }\n\n  const onTxtChange = (txt) => {\n    setAnnText(txt.target.value)\n  }\n\n  \n\n  const modules = {\n    toolbar: [\n      [{ 'header': '1' }, { 'header': '2' }],\n      ['bold', 'italic','underline'],\n      [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n      ['link', 'image'],\n    ],\n  };\n\n  const formats = [\n    'header',\n    'bold', 'italic',\n    'list', 'bullet',\n    'link', 'image',\n  ];\n\n  return (\n    <div>\n      {privilege === 'instructor' && (\n        \n        <span>\n          <div style={{ marginBottom: '10px' }}>\n          <strong>Title:</strong>&nbsp;&nbsp;&nbsp;\n          <Input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            placeholder=\"Enter your announcement title\"\n          />\n          \n        </div>\n        <ReactQuill\n            value={annText}\n            onChange={setEditorHtml}\n            modules={modules}\n            formats={formats}\n            placeholder=\"Write your announcement!\"\n          />\n          {/* <Input.TextArea\n            size=\"large\"\n            allowClear={true}\n            bordered={true}\n            value={annText}\n            placeholder=\"Write your announcement!\"\n            onChange={onTxtChange}\n            className=\"txt\"\n          ></Input.TextArea> */}\n          <Button className=\"postButton\" onClick={onPost}>\n            Post\n          </Button>\n        </span>\n      )}\n      <Feed announcements={announcements} user={user} />\n    </div>\n  )\n}\n\nexport default AnnouncementsFeed\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/discussions/index.jsx",["686","687","688"],"// import DiscussionCard from './components/discussionCard'\n// import './styles.css'\n// import { EditorState, convertToRaw, ContentState } from 'draft-js';\n// import { Editor } from 'react-draft-wysiwyg';\n// import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n// import ReactQuill from 'react-quill';\n// import 'react-quill/dist/quill.snow.css'\n\n\n\n// import { useSelector, useDispatch } from 'react-redux'\n// import React, { useState, useEffect } from 'react'\n// import { Button, Input, Select, Space, Checkbox, Typography } from 'antd'\n\n\n// import {\n//   addDiscussion,\n//   getAllDiscussions\n// } from '../../reducers/discussionReducer'\n\n// const { Text } = Typography;\n\n// const { Option } = Select;\n\n// const modules = {\n//   toolbar: [\n//     [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n//     [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n//     ['bold', 'italic', 'underline'],\n//     ['link', 'image'],\n//   ],\n// };\n\n// const formats = [\n//   'header',\n//   'font',\n//   'list',\n//   'bold',\n//   'italic',\n//   'underline',\n//   'link',\n//   'image',\n// ];\n\n\n// const Feed = ({ discussions, user }) => {\n//   return discussions.map((dis) => {\n//     return <DiscussionCard key={dis._id} discussion={dis} user={user} />\n//   })\n// }\n\n\n// const DiscussionFeed = ({ courseId }) => {\n//   const {Option} =Select\n//   const dispatch = useDispatch()\n//   useEffect(() => {\n//     dispatch(getAllDiscussions(courseId))\n//   }, [dispatch, courseId])\n//   const user = useSelector((state) => state.auth.user)\n//   const discussions = useSelector((state) => state.discussions)\n//   const [disText, setDisText] = useState('')\n//   const [category, setCategory] = useState('Lecture');\n//   const [title, setTitle] = useState('')\n//   const [isAnonymous, setIsAnonymous] = useState('No');\n//   const [isPrivate, setIsPrivate] = useState('No');\n//   //const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n\n//   const setEditorHtml = (html) => {\n//     setDisText(html);\n//   };\n\n//   const onPost =  () => {\n//     if (disText !== ''){\n//       //const contentState = editorState.getCurrentContent();\n//       //const rawContentState = convertToRaw(contentState);\n\n    \n//       dispatch(addDiscussion(courseId, disText, category, title, isAnonymous,isPrivate ))\n//       setTitle('')\n//       setDisText('')\n//     // setEditorState(EditorState.createEmpty());\n//   } else {console.log('cannot post an empty post')\n//   }}\n  \n//   const onTxtChange = (txt) => {\n//     setDisText(txt.target.value)\n//   }\n//   // const onEditorStateChange = (editorState) => {\n//   //   setEditorState(editorState);\n//   // };\n//   const onCategoryChange = (value) => {\n//     setCategory(value);\n//   };\n\n//   const onTitleChange =(txt) => {\n//     setTitle(txt.target.value);\n//   }\n\n//   const onAnonymousChange = (value) => {\n//     setIsAnonymous(value); // Toggle the state\n    \n//   };\n//   const onPrivateChange = (value) => {\n//     setIsPrivate(value); // Toggle the state\n    \n//   };\n//   return (\n//     <div className=\"container\">\n//       <span>\n//       <div style={{ marginBottom: '10px' }}>\n//           <strong>Title:</strong>&nbsp;&nbsp;&nbsp;\n//           <Input\n//             value={title}\n//             onChange={(e) => setTitle(e.target.value)}\n//             placeholder=\"Enter your question title\"\n//           />\n//         </div>\n\n//         <div style={{ marginBottom: '10px' }}>\n//           <strong>Category:</strong>&nbsp;&nbsp;&nbsp;\n//           <Select\n//             style={{ width: '200px' }}\n//             value={category}\n//             onChange={(value) => onCategoryChange(value)}\n//             placeholder=\"Select category\"\n//           >\n//             <Option value=\"Lecture\">Lecture</Option>\n//             <Option value=\"General\">General</Option>\n//             <Option value=\"Assignment\">Assignment</Option>\n//             <Option value=\"Exam\">Exam</Option>\n//           </Select>\n//         </div>\n// {/* \n//         {user.role === 'student' && (\n//       <div style={{ marginBottom: '10px' }}>\n//         <strong>Anonymous</strong>&nbsp;&nbsp;&nbsp;\n//         <Select\n//           style={{ width: '200px' }}\n//           value={isAnonymous}\n//           onChange={(value) => onAnonymousChange(value)}\n//           placeholder=\"Select one option\"\n//         >\n//           <Option value=\"No\">No</Option>\n//           <Option value=\"Yes\">Yes</Option>\n//         </Select>\n//         <span style={{ fontSize: '12px', color: 'gray', marginLeft: '10px' }}>\n//           Hide your name from other students\n//         </span>\n//       </div> */}\n//       {user.role === 'student' && (\n//       <div>\n//         <div style={{ marginBottom: '10px' }}>\n//           <strong>Anonymous</strong>&nbsp;&nbsp;&nbsp;\n//           <Select\n//             style={{ width: '200px' }}\n//             value={isAnonymous}\n//             onChange={(value) => onAnonymousChange(value)}\n//             placeholder=\"Select one option\"\n//           >\n//             <Option value=\"No\">No</Option>\n//             <Option value=\"Yes\">Yes</Option>\n//           </Select>\n//           <span style={{ fontSize: '12px', color: 'gray', marginLeft: '10px' }}>\n//             Hide your name from other students\n//           </span>\n//         </div>\n\n//         <div style={{ marginBottom: '10px' }}>\n//           <strong>Private</strong>&nbsp;&nbsp;&nbsp;\n//           <Select\n//             style={{ width: '200px' }}\n//             value={isPrivate}\n//             onChange={(value) => onPrivateChange(value)}\n//             placeholder=\"Select one option\"\n//           >\n//             <Option value=\"No\">No</Option>\n//             <Option value=\"Yes\">Yes</Option>\n//           </Select>\n//           <span style={{ fontSize: '12px', color: 'gray', marginLeft: '10px' }}>\n//             Talk to your professor in private\n//           </span>\n//         </div>\n//       </div>\n//     )}\n//   </span>\n// </div>\n      \n\n//     {/* )} */}\n//     <div style={{ marginBottom: '10px' }}>\n        \n//         <ReactQuill\n//           modules={modules}\n//           formats={formats}\n//           value={disText}\n//           onChange={setEditorHtml}\n//           placeholder=\"Write your question!\"\n//        />\n//       </div>\n     \n        \n//     <div style={{ textAlign: 'center', width: '200px', margin: 'auto', marginTop: '10px' }}>\n//       <Button\n//       className=\"postButton\"\n//       // type=\"primary\"\n//       // Set the button style to primary\n//       style={{ marginBottom: '20px' }}\n//       onClick={onPost}\n//       >\n//         Add Question\n//       </Button>\n//     </div>\n//   </span>\n    \n//       <Feed discussions={discussions} user={user} classname= 'container'/>\n//       {/* isPrivate={isPrivate} isAnonymous={isAnonymous} */}\n//     </div>\n//   )\n// }\n\n// export default DiscussionFeed\nimport DiscussionCard from './components/discussionCard';\nimport './styles.css';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Input, Select, Typography } from 'antd';\nimport {\n  addDiscussion,\n  getAllDiscussions\n} from '../../reducers/discussionReducer';\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\nconst modules = {\n  toolbar: [\n    [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n    ['bold', 'italic', 'underline'],\n    ['link', 'image'],\n  ],\n};\n\nconst formats = [\n  'header',\n  'font',\n  'list',\n  'bold',\n  'italic',\n  'underline',\n  'link',\n  'image',\n];\n\n\n\n         \n\nconst Feed = ({ discussions, user }) => {\n  const filteredDiscussions = discussions.filter(\n    (dis) => !(dis.isPrivate === 'Yes' && user.role === 'student' && dis.user._id !== user._id && user.role !== 'instructor')\n  );\n\n  return filteredDiscussions.map((dis) => {\n    return <DiscussionCard key={dis._id} discussion={dis} user={user} />;\n  });\n};\n            \n\nconst DiscussionFeed = ({ courseId }) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllDiscussions(courseId));\n  }, [dispatch, courseId]);\n\n  const user = useSelector((state) => state.auth.user);\n  const discussions = useSelector((state) => state.discussions);\n  const [disText, setDisText] = useState('');\n  const [category, setCategory] = useState('Lecture');\n  const [title, setTitle] = useState('');\n  const [isAnonymous, setIsAnonymous] = useState('No');\n  const [isPrivate, setIsPrivate] = useState('No');\n\n  const setEditorHtml = (html) => {\n    setDisText(html);\n  };\n\n  const onPost = () => {\n    if (disText !== '') {\n      dispatch(addDiscussion(courseId, disText, category, title, isAnonymous, isPrivate));\n      setTitle('');\n      setDisText('');\n    } else {\n      console.log('Cannot post an empty post');\n    }\n  };\n\n  const onTxtChange = (txt) => {\n    setDisText(txt.target.value);\n  };\n\n  const onCategoryChange = (value) => {\n    setCategory(value);\n  };\n\n  const onTitleChange = (txt) => {\n    setTitle(txt.target.value);\n  };\n\n  const onAnonymousChange = (value) => {\n    setIsAnonymous(value);\n  };\n\n  const onPrivateChange = (value) => {\n    setIsPrivate(value);\n  };\n\n  return (\n    <div className=\"container\">\n      <span>\n        <div style={{ marginBottom: '10px' }}>\n          <strong>Title:</strong>&nbsp;&nbsp;&nbsp;\n          <Input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            placeholder=\"Enter your question title\"\n          />\n        </div>\n\n        <div style={{ marginBottom: '10px' }}>\n          <strong>Category:</strong>&nbsp;&nbsp;&nbsp;\n          <Select\n            style={{ width: '200px' }}\n            value={category}\n            onChange={(value) => onCategoryChange(value)}\n            placeholder=\"Select category\"\n          >\n            <Option value=\"Lecture\">Lecture</Option>\n            <Option value=\"General\">General</Option>\n            <Option value=\"Assignment\">Assignment</Option>\n            <Option value=\"Exam\">Exam</Option>\n          </Select>\n        </div>\n\n        {user.role === 'student' && (\n          <div>\n            <div style={{ marginBottom: '10px' }}>\n              <strong>Anonymous</strong>&nbsp;&nbsp;&nbsp;\n              <Select\n                style={{ width: '200px' }}\n                value={isAnonymous}\n                onChange={(value) => onAnonymousChange(value)}\n                placeholder=\"Select one option\"\n              >\n                <Option value=\"No\">No</Option>\n                <Option value=\"Yes\">Yes</Option>\n              </Select>\n              <span style={{ fontSize: '12px', color: 'gray', marginLeft: '10px' }}>\n                Hide your name from other students\n              </span>\n            </div>\n\n            <div style={{ marginBottom: '10px' }}>\n              <strong>Private</strong>&nbsp;&nbsp;&nbsp;\n              <Select\n                style={{ width: '200px' }}\n                value={isPrivate}\n                onChange={(value) => onPrivateChange(value)}\n                placeholder=\"Select one option\"\n              >\n                <Option value=\"No\">No</Option>\n                <Option value=\"Yes\">Yes</Option>\n              </Select>\n              <span style={{ fontSize: '12px', color: 'gray', marginLeft: '10px' }}>\n                Talk to your professor in private\n              </span>\n            </div>\n          </div>\n        )}\n      </span>\n      <div style={{ marginBottom: '10px' }}>\n        <ReactQuill\n          modules={modules}\n          formats={formats}\n          value={disText}\n          onChange={setEditorHtml}\n          placeholder=\"Write your question!\"\n        />\n      </div>\n      <div style={{ textAlign: 'center', width: '200px', margin: 'auto', marginTop: '10px' }}>\n        <Button\n          className=\"postButton\"\n          style={{ marginBottom: '20px' }}\n          onClick={onPost}\n        >\n          Add Question\n        </Button>\n      </div>\n      <Feed discussions={discussions} user={user} classname='container' />\n    </div>\n  );\n};\n\nexport default DiscussionFeed;\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/index.jsx",["689"],"import SpyLogic from './components/spyLogic'\nimport { Prompt, useParams } from 'react-router'\nimport './styles.css'\nimport { Affix, Col, Modal, Row } from 'antd'\nimport QuestionsSection from './components/QuestionsSection'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useEffect } from 'react'\nimport { getOneSubmission } from '../../reducers/assessmentTakingReducer'\nimport Spinner from '../../components/Spinner'\n\nconst AssessmentTaking = (props) => {\n  const dispatch = useDispatch()\n  const { submission, loading } = useSelector((state) => state.assessmentTaking)\n\n  const { assessmentType } = props\n  const { courseId, assessmentId } = useParams()\n  const user = useSelector((state) => state.auth.user)\n\n  useEffect(() => {\n    dispatch(getOneSubmission(courseId, assessmentId, user._id))\n  }, [dispatch])\n\n  return (\n    <>\n      {assessmentType === 'Exam' && (\n        <ExamTaker submission={submission} loading={loading} />\n      )}\n      {assessmentType === 'Assignment' && (\n        <AssignmentTaker submission={submission} loading={loading} />\n      )}\n    </>\n  )\n}\n\nconst ExamTaker = (props) => {\n  const { submission, loading } = props\n\n  if (loading || Object.keys(submission).length === 0)\n    return <Spinner size=\"large\" />\n  else if (submission.assessment.remainingTime <= 0) {\n    Modal.error({\n      title: 'The Exam has ended',\n      onOk() {\n        window.close()\n      }\n    })\n    return null\n  } else if (submission.finished) {\n    Modal.info({\n      title: 'You already submitted',\n      onOk() {\n        window.close()\n      }\n    })\n    return null\n  } else if (submission.assessment.status.code === 'willOpen') {\n    Modal.info({\n      title: \"Exam didn't open yet\",\n      onOk() {\n        window.close()\n      }\n    })\n    return null\n  }\n\n  return (\n    <>\n      <Prompt\n        when={true}\n        message=\"You cant leave during the exam {press CANCEL to return, press OK to reset your exam\"\n      />\n      <Row>\n        <Col span={20}>\n          <QuestionsSection submission={submission} />\n        </Col>\n        <Col span={4}>\n          <Affix offsetTop={10}>\n            <SpyLogic\n              timeRemaining={submission.assessment.remainingTime}\n              examId={submission.assessment.id}\n            />\n          </Affix>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nconst AssignmentTaker = (props) => {\n  const { submission, loading } = props\n\n  if (loading || Object.keys(submission).length === 0)\n    return <Spinner size=\"large\" />\n\n  return (\n    <>\n      <div style={{ width: '85%', margin: '0 auto' }}>\n        <QuestionsSection submission={submission} />\n      </div>\n    </>\n  )\n}\n\nexport default AssessmentTaking\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/Profile/index.jsx",["690"],"import { useSelector, useDispatch } from 'react-redux'\nimport React, { useState } from 'react'\nimport Avatar from 'antd/lib/avatar/avatar'\nimport Meta from 'antd/lib/card/Meta'\nimport './style.css'\nimport { uploadFile } from 'react-s3'\nimport { Form, Input, Card, Button } from 'antd'\nimport { editProfile } from '../../reducers/authReducer'\nimport ImageUploader from 'react-images-upload'\nimport notificationsService from '../../services/notifications'\nrequire('dotenv').config()\n\nconst Profile = () => {\n  const dispatch = useDispatch()\n\n  const user = useSelector((state) => state.auth.user)\n  const [name, setName] = useState(user.name)\n  const [email, setEmail] = useState(user.email)\n  //const [password, setPassword] = useState(user.passwordConfirm)\n  const [mobile, setMobile] = useState(user.mobile)\n  const [university, setUniversity] = useState(user.university)\n  const [userName, setUserName] = useState(user.username)\n  const [photo, setPhoto] = useState(user.photo)\n  const [active, setActive] = useState(true)\n\n  const onNameChange = (txt) => {\n    setName(txt.target.value)\n  }\n  const onEmailChange = (txt) => {\n    setEmail(txt.target.value)\n  }\n  /*const onPasswordChange = (txt) => {\n    setPassword(txt.target.value)\n  }*/\n  const onUserNameChange = (txt) => {\n    setUserName(txt.target.value)\n  }\n  const onMobileChange = (txt) => {\n    setMobile(txt.target.value)\n  }\n  const onsave = () => {\n    if (typeof(photo.name) != 'undefined') {\n      dispatch(\n        editProfile({\n          name: name,\n          email: email,\n          username: userName,\n          mobile: mobile,\n          photo:\n            '' +\n            user._id +\n            '/' +\n            photo.name\n        })\n      )\n    } else {\n      dispatch(\n        editProfile({\n          name: name,\n          email: email,\n          username: userName,\n          mobile: mobile,\n          \n          photo: user.photo\n        })\n      )\n    }\n  }\n\n  const S3_BUCKET ='cmodule'\n  const REGION ='us-east-1'\n  const ACCESS_KEY = 'AKIA3QXLY7LWW4F7K24A'\n  const SECRET_ACCESS_KEY = '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'\n\n  \n  const config = {\n    bucketName: S3_BUCKET,\n    region: REGION,\n    dirName: 'users_profile_photo/' + user._id,\n    accessKeyId: ACCESS_KEY,\n    secretAccessKey: SECRET_ACCESS_KEY\n  }\n\n  const onFileChange = (event) => {\n    setPhoto(event[0])\n    setActive(false)\n  }\n\n  const handleUpload = async () => {\n    await uploadFile(photo, config)\n      .then((data) => {\n        console.log(data)\n        console.log('uploaded')\n        setActive(true)\n      })\n      .catch((err) => console.error(err))\n  }\n\n  \n\n  \n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <div className=\"avatar\">\n            <Meta\n              avatar={<Avatar size=\"large\" src={user.photo} />}\n              title={user.name}\n            />\n          </div>\n          <h5 className=\"card-title\">{'University: ' + user.university}</h5>\n          <h5 className=\"card-title\">{'Role: ' + user.role}</h5>\n          <h5 className=\"card-text\">{'@' + user.username}</h5>\n          <p className=\"card-text\">\n            {user.email}\n            <br />\n            <span className=\"phone\">{user.mobile}</span>\n          </p>\n        </div>\n        <span>user's Bio</span>\n      </div>\n      <Card className=\"Form\">\n        <Form size=\"middle\" colon={true} labelAlign=\"left\" layout=\"vertical\">\n          <Form.Item label=\"Name:\">\n            <Input\n              allowClear={true}\n              className=\"input\"\n              value={name}\n              onChange={onNameChange}\n            />\n          </Form.Item>\n          <Form.Item label=\"User Name:\">\n            <Input\n              allowClear={true}\n              className=\"input\"\n              value={userName}\n              onChange={onUserNameChange}\n            />\n          </Form.Item>\n          <Form.Item label=\"Email:\">\n            <Input\n              allowClear={true}\n              className=\"input\"\n              value={email}\n              onChange={onEmailChange}\n            />\n          </Form.Item>\n          <Form.Item label=\"Mobile:\">\n            <Input\n              allowClear={true}\n              className=\"input\"\n              value={mobile}\n              onChange={onMobileChange}\n            />\n          </Form.Item>\n          <Form.Item label=\"University:\">\n            <Input\n              allowClear={true}\n              className=\"input\"\n              value={university}\n              //onChange={onMobileChange}\n            />\n          </Form.Item>\n          {/*<Form.Item label=\"New Password\">\n            <Input.Password\n              allowClear={true}\n              className=\"input\"\n              value={password}\n              onChange={onPasswordChange}\n            />\n          </Form.Item>*/}\n          <Form.Item label=\"Photo:\">\n            <ImageUploader\n              withIcon={true}\n              buttonText=\"Choose images\"\n              onChange={onFileChange}\n              imgExtension={['.jpg', '.png']}\n              maxFileSize={1048576}\n              singleImage={true}\n              label=\"max size 1MB\"\n            />\n            <button onClick={handleUpload}>Upload!</button>\n          </Form.Item>\n          <Button disabled={!active} onClick={onsave} loading={!active}>\n            Save Changes\n          </Button>\n          <Button\n            className=\"unsub\" \n            type=\"text\"\n            onClick={() => notificationsService.unsubscribe()}\n            title=\"Re-login to subscribe again!!\"\n          >\n            unsubscribe from notifications on all devices\n          </Button>\n        </Form>\n      </Card>\n    </div>\n  )\n}\n\nexport default Profile\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/ArticlePage/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/courses/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/PrivateRoute/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/PublicRoute/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/SideNav/index.jsx",["691","692"],"import React from 'react'\nimport { Layout, Menu } from 'antd'\nimport { NavLink, useLocation } from 'react-router-dom'\n\nimport {\n  UserOutlined,\n  CalendarOutlined,\n  DashboardOutlined,\n  CrownOutlined,\n  HddOutlined\n} from '@ant-design/icons'\n\nimport { RiArticleLine } from 'react-icons/ri'\nimport { ImBooks } from 'react-icons/im'\nimport Logo from '../Logo'\n\nconst SideNav = (props) => {\n  const { collapsed, onCollapse } = props\n  const { Sider } = Layout\n\n  let currentPath = useLocation().pathname\n\n  // dummy fix for side nav highlight\n  if (currentPath.includes('/app/course/'))\n    currentPath = currentPath.replace('/app/course/', '/app/courses/')\n\n  return (\n    <Sider\n      collapsible\n      collapsed={collapsed}\n      onCollapse={onCollapse}\n      breakpoint=\"lg\"\n      style={{\n        overflow: 'auto',\n        height: '100vh',\n        position: 'fixed',\n        left: 0\n      }}\n    >\n      <div\n        style={{ cursor: 'pointer' }}\n       // onClick={() => (window.location = 'https://gp-eduhub.github.io/')}\n      >\n        <Logo collapsed={collapsed} />\n      </div>\n      <Menu\n        theme=\"dark\"\n        mode=\"inline\"\n        activeKey={currentPath}\n        selectedKeys={currentPath}\n      >\n        <Menu.Item key=\"/app/dashboard\" icon={<DashboardOutlined />}>\n          <NavLink to=\"/app/dashboard\">Dashboard</NavLink>\n        </Menu.Item>\n        <Menu.Item key=\"/app/courses\" icon={<ImBooks />}>\n          <NavLink to=\"/app/courses\">Courses</NavLink>\n        </Menu.Item>\n        <Menu.Item key=\"/app/calendar\" icon={<CalendarOutlined />}>\n          <NavLink to=\"/app/calendar\">Calendar</NavLink>\n        </Menu.Item>\n        {/* <Menu.Item key=\"/app/articles\" icon={<RiArticleLine />}>\n          <NavLink to=\"/app/articles\">Articles</NavLink>\n        </Menu.Item> */}\n        {/* <SubMenu key=\"sub1\" icon={<TeamOutlined />} title=\"Groups\">\n          <Menu.Item key=\"5\">Place Holder 1</Menu.Item>\n          <Menu.Item key=\"6\">Place Holder 2</Menu.Item>\n        </SubMenu> */}\n        {/* <Menu.Item key=\"/app/acheivements\" icon={<CrownOutlined />}>\n          <NavLink to=\"/app/acheivements\">Acheivements</NavLink>\n        </Menu.Item> */}\n        <Menu.Item key=\"/app/archives\" icon={<HddOutlined />}>\n          <NavLink to=\"/app/archives\">Archives</NavLink>\n        </Menu.Item>\n        <Menu.Item key=\"/app/profile\" icon={<UserOutlined />}>\n          <NavLink to=\"/app/profile\">Profile</NavLink> \n        </Menu.Item>\n      </Menu>\n    </Sider>\n  )\n}\n\nexport default SideNav\n","/Users/mbuto/Downloads/Corner-master/Client/src/pages/Registeration/index.jsx",["693","694"],"import React from 'react'\nimport { Link, useHistory } from 'react-router-dom'\n\nimport { Form, Input, Button, Checkbox, Divider, Select } from 'antd'\nimport {\n  MailOutlined,\n  LockOutlined,\n  GoogleOutlined,\n  UserOutlined,\n  MobileOutlined,\n  CodeSandboxOutlined\n} from '@ant-design/icons'\nimport { register } from '../../reducers/authReducer'\n\nimport { useDispatch } from 'react-redux'\n\nimport {\n  FormItemFlex,\n  PageContainer,\n  FormContainer,\n  FormWrapper,\n  FormTitle\n} from './style'\n\nconst Registeration = () => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const onFinish = (values) => {\n    console.log('Received values of form: ', values)\n    try {\n      dispatch(register(values))\n      history.push('/login')\n    } catch (e) {\n      console.log(\"can't register\")\n    }\n  }\n\n  return (\n    <PageContainer>\n      <FormContainer>\n        <FormWrapper>\n          <Form\n            name=\"register\"\n            onFinish={onFinish}\n            initialValues={{ remember: false }}\n            scrollToFirstError\n          >\n            <FormTitle>Sign Up</FormTitle>\n            <p>\n              Have already Account ? <Link to=\"/login\">Login</Link>\n            </p>\n\n            <Form.Item\n              name=\"name\"\n              rules={[\n                {\n                  required: true,\n                  message: 'please enter your name'\n                },\n                {\n                  min: 3,\n                  message: 'please min length for name is 3'\n                }\n              ]}\n            >\n              <Input prefix={<UserOutlined />} placeholder=\"fullname\" />\n            </Form.Item>\n\n            <Form.Item\n              name=\"username\"\n              rules={[\n                {\n                  required: true,\n                  message: 'please enter your username'\n                },\n                {\n                  min: 3,\n                  message: 'please min length for username is 3'\n                }\n              ]}\n            >\n              <Input prefix={<UserOutlined />} placeholder=\"username\" />\n            </Form.Item>\n\n            <Form.Item\n              name=\"email\"\n              rules={[\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]}\n            >\n              <Input prefix={<MailOutlined />} placeholder=\"E-Mail\" />\n            </Form.Item>\n            <Form.Item name=\"role\"\n            rules={[\n              \n              {\n                required: true,\n                message: 'Please input your Role!'\n              }\n            ]}\n          >\n              <Select prefix={<UserOutlined />} placeholder=\"Role\">\n                <Select.Option value=\"instructor\">Instructor</Select.Option>\n                <Select.Option value=\"student\">Student</Select.Option>\n                {/* <Select.Option value=\"admin\">Admin</Select.Option> */}\n              </Select>\n            </Form.Item>\n            <Form.Item\n              name=\"mobile\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input your phone!'\n                }\n              ]}\n            >\n              <Input prefix={<MobileOutlined />} placeholder=\"mobile\" />\n            </Form.Item>\n\n            <Form.Item\n              name=\"password\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                }\n              ]}\n              hasFeedback\n            >\n              <Input.Password\n                prefix={<LockOutlined />}\n                placeholder=\"password\"\n              />\n            </Form.Item>\n\n            <Form.Item\n              name=\"passwordConfirm\"\n              dependencies={['password']}\n              hasFeedback\n              rules={[\n                {\n                  required: true,\n                  message: 'Please confirm your password!'\n                },\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('password') === value) {\n                      return Promise.resolve()\n                    }\n\n                    return Promise.reject(\n                      'The two passwords that you entered do not match!'\n                    )\n                  }\n                })\n              ]}\n            >\n              <Input.Password\n                prefix={<LockOutlined />}\n                placeholder=\"confirm password\"\n              />\n            </Form.Item>\n            <Form.Item name=\"university\"\n            rules={[\n              \n              {\n                required: true,\n                message: 'Please input your university!'\n              }\n            ]}\n          >\n              <Select prefix={<UserOutlined />} placeholder=\"University\">\n                \n                    <Select.Option value=\"INES\">INES</Select.Option>\n                    <Select.Option value=\"KEPLER\">KEPLER</Select.Option>\n                    <Select.Option value=\"ALU\">ALU</Select.Option>\n                    <Select.Option value=\"UK\">UK</Select.Option>\n                    <Select.Option value=\"UNILAK\">UNILAK</Select.Option>\n                    <Select.Option value=\"ULK\">ULK</Select.Option>\n                    <Select.Option value=\"AUKA\">AUKA</Select.Option>\n                    <Select.Option value=\"RICA\">RICA</Select.Option>\n                    <Select.Option value=\"UR-BUSOGO\">UR-BUSOGO</Select.Option>\n                    <Select.Option value=\"UR-HUYE\">UR-HUYE</Select.Option>\n                    <Select.Option value=\"UR-REMERA\">UR-REMERA</Select.Option>\n                    <Select.Option value=\"UR-NYARUGENGE\">UR-NYARUGENGE</Select.Option>\n                    <Select.Option value=\"UR-RUKARA\">UR-RUKARA</Select.Option>\n                    <Select.Option value=\"UR-RUSIZI\">UR-RUSIZI</Select.Option>\n                    <Select.Option value=\"UR-GIKONDO\">UR-GIKONDO</Select.Option>\n                   \n              </Select>\n            </Form.Item>\n            <Form.Item\n              name=\"code\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input your nickname!',\n                  whitespace: true\n                },\n                {\n                  len: 6,\n                  message: 'length should be 6'\n                }\n              ]}\n            >\n              <Input prefix={<CodeSandboxOutlined />} placeholder=\"code\" />\n            </Form.Item>\n\n            <FormItemFlex>\n              <Form.Item\n                name=\"agreement\"\n                valuePropName=\"checked\"\n                rules={[\n                  {\n                    validator: (_, value) =>\n                      value\n                        ? Promise.resolve()\n                        : Promise.reject('Should accept agreement')\n                  }\n                ]}\n              >\n                <Checkbox>\n                  I have read the <Link to=\"#\">agreement</Link>\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Link to=\"/ForgetPassword\">Forget Password?</Link>\n              </Form.Item>\n            </FormItemFlex>\n\n            <Form.Item>\n              <Button block type=\"primary\" htmlType=\"submit\">\n                Sign Up\n              </Button>\n            </Form.Item>\n\n            {/* <Divider plain>Or</Divider>\n\n            <Form.Item>\n              <Button block icon={<GoogleOutlined />}>\n                Sign up with Google\n              </Button>\n            </Form.Item> */}\n          </Form>\n        </FormWrapper>\n      </FormContainer>\n    </PageContainer>\n  )\n}\nexport default Registeration\n","/Users/mbuto/Downloads/Corner-master/Client/src/pages/NotFoundPage/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/pages/Login/index.jsx",["695","696","697","698"],"import React from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport{ useState } from 'react';\n\n\n\nimport { login } from '../../reducers/authReducer'\n\nimport { Form, Input, Button, Checkbox, Divider } from 'antd'\nimport { MailOutlined, LockOutlined, GoogleOutlined } from '@ant-design/icons'\n\nimport {\n  FormItemFlex,\n  PageContainer,\n  FormContainer,\n  FormWrapper,\n  FormTitle\n} from './style'\n\nconst Login = () => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n  \n  const onFinish = (values) => {\n    if (values.remember) {\n      window.localStorage.setItem(\n        'eduhub-remember-cred',\n        JSON.stringify({ remember: values.remember, email: values.email })\n      )\n    } else {\n      window.localStorage.setItem(\n        'eduhub-remember-cred',\n        JSON.stringify({ remember: false })\n      )\n    }\n    dispatch(login(values))\n    //history.push('/app/courses')\n  }\n\n  const getInitialValues = () => {\n    return JSON.parse(window.localStorage.getItem('eduhub-remember-cred'))\n  }\n\n  return (\n    <PageContainer>\n      <FormContainer>\n        <FormWrapper>\n          <Form\n            name=\"login\"\n            onFinish={onFinish}\n            initialValues={getInitialValues()}\n            scrollToFirstError\n          >\n            <FormTitle>Sign in</FormTitle>\n            \n            <p>\n              New user? <Link to=\"/register\">Create Account</Link>\n            </p>\n\n            <Form.Item\n              name=\"email\"\n              rules={[\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]}\n            >\n              <Input prefix={<MailOutlined />} placeholder=\"E-Mail\" />\n            </Form.Item>\n\n            <Form.Item\n              name=\"password\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                }\n              ]}\n              hasFeedback\n            >\n              <Input.Password\n                prefix={<LockOutlined />}\n                placeholder=\"password\"\n              />\n            </Form.Item>\n\n            <FormItemFlex>\n              <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n                <Checkbox>Remember me</Checkbox>\n              </Form.Item>\n              {/* <Link to=\"/ForgetPassword\" style={{ alignSelf: \"flex-start\" }}>\n\t\t\t\t\t\t\t<p style={{ padding: \"0 15px\" }}>Forgot Password? </p></Link> */}\n              { <Link to=\"/forgot-password\" style={{ alignSelf: \"flex-start\" }}>\n\t\t\t\t\t\t\t<p style={{ padding: \"0 15px\" }}>Forgot Password?</p> </Link> }\n            </FormItemFlex>\n\n            <Form.Item>\n              <Button block type=\"primary\" htmlType=\"submit\">\n                Login\n              </Button>\n            </Form.Item>\n\n            {/* <Divider plain>Or</Divider>\n\n            <Form.Item>\n              <Button block icon={<GoogleOutlined />}>\n                Sign in with Google\n              </Button>\n            </Form.Item> */}\n          </Form>\n        </FormWrapper>\n      </FormContainer>\n    </PageContainer>\n  )\n}\nexport default Login\n","/Users/mbuto/Downloads/Corner-master/Client/src/components/schoolRegistration/style.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/style.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/hooks/useCourseprivilege.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/constants/userRoles.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/Spinner.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/pages/Login/style.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/pages/Registeration/style.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/Logo.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/CourseCard.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/Submissions.jsx",["699"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { FlexSectionHeader } from '../../style'\n\nimport { Avatar, Button, Space, Table, Typography, Tag } from 'antd'\nimport { useParams } from 'react-router'\nimport useCoursePrivilege from '../../../hooks/useCourseprivilege'\nimport { STUDENT } from '../../../constants/userRoles'\nimport { Link } from 'react-router-dom'\nimport { DateTime } from 'luxon'\nimport PlagarismTag from '../../../components/PlagarismTag'\nimport {\n  autoGrade,\n  checkPlagiarism,\n  getAllSubmissions\n} from '../../../reducers/submissionsReducer'\nimport Spinner from '../../../components/Spinner'\n\nimport AutoGradingTag from '../../../components/AutoGradingTag'\n\nconst { Title, Text } = Typography\nconst { Column } = Table\n\nconst Submissions = (props) => {\n  const dispatch = useDispatch()\n\n  const { courseId, assessmentId } = useParams()\n  const { privilege } = useCoursePrivilege()\n\n  const data = useSelector((state) => state.submissions.data)\n  const loading = useSelector((state) => state.submissions.loading)\n\n  const { assessment, submissions } = data || {}\n\n  useEffect(() => {\n    dispatch(getAllSubmissions(courseId, assessmentId))\n  }, [])\n\n  if (loading || !assessment) return <Spinner size=\"large\" />\n\n  return (\n    <>\n      <FlexSectionHeader>\n        <Title level={3}>\n          All Submissions for <Text type=\"secondary\">{assessment?.title}</Text>\n        </Title>\n        <Space>\n          {privilege !== STUDENT && assessment?.questionsType === 'online' && (\n            <Button\n              onClick={() => dispatch(autoGrade(courseId, assessmentId))}\n              type=\"primary\"\n            >\n              Auto Grade\n            </Button>\n          )}\n          {privilege !== STUDENT && assessment?.submissionType === 'written' && (\n            <Button\n              onClick={() => dispatch(checkPlagiarism(courseId, assessmentId))}\n              type=\"primary\"\n            >\n              Check Plagiarism\n            </Button>\n          )}\n        </Space>\n      </FlexSectionHeader>\n\n      <Table\n        pagination={false}\n        style={{ marginTop: '24px' }}\n        rowKey={(submission) => submission.id}\n        dataSource={submissions}\n      >\n        <Column\n          title=\"Photo\"\n          dataIndex={['student', 'photo']}\n          render={(img) => <Avatar src={img} />}\n        />\n        <Column title=\"Name\" dataIndex={['student', 'name']} />\n        <Column\n          title=\"Submission Time\"\n          dataIndex=\"submittedAt\"\n          render={(time) => {\n            if (!time) return '-'\n            else\n              return DateTime.fromISO(time).toLocaleString(\n                DateTime.DATETIME_MED\n              )\n          }}\n        />\n        {assessment?.type === 'Assignment' && (\n          <Column\n            title=\"Status\"\n            dataIndex=\"status\"\n            render={(status) => (\n              <>\n                {status.code === 'late' && <Tag color=\"red\">{status.code}</Tag>}\n                {status.code === 'onTime' && (\n                  <Tag color=\"green\">{status.code}</Tag>\n                )}\n              </>\n            )}\n          />\n        )}\n        {assessment?.submissionType === 'written' && (\n          <Column\n            title=\"Plagirism Degree\"\n            dataIndex=\"plagarismStatus\"\n            render={(plagarismStatus) => (\n              <PlagarismTag status={plagarismStatus} />\n            )}\n          />\n        )}\n        {assessment?.questionsType === 'online' && (\n          <Column\n            title=\"Auto Grading\"\n            dataIndex=\"autoGradingStatus\"\n            render={(autoGradingStatus) => (\n              <AutoGradingTag status={autoGradingStatus} />\n            )}\n          />\n        )}\n        <Column\n          title={`Score / ${assessment.maxScore}`}\n          dataIndex=\"score\"\n          render={(score) => (score === undefined ? '-' : score)}\n        />\n        <Column\n          title=\"Action\"\n          render={(text, record, index) => (\n            <Link\n              to={{\n                pathname: `/app/course/${courseId}/assessment/${assessmentId}/grade`,\n                state: { index: index }\n              }}\n            >\n              Grade\n            </Link>\n          )}\n        />\n      </Table>\n    </>\n  )\n}\n\nexport default Submissions\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/AssessmentCreation.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/components/FollowIcon.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/components/BookMarkIcon.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/articles/components/LikeIcon.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/Article/comments/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/DropDownNotification/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/ProfileIcon/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/CourseNavigation/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/AssessmentOptionsMenu.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/AssessmentQuestionsSection.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/AutoGradingTag.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/PlagarismTag.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/QuestionList.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/WrittenQuestionForm.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/ChoiceQuestionForm.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewWrittenQuestion/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewChoiceQuestion/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/QuestionHead.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewWrittenQuestion/style.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/exams/components/PerviewChoiceQuestion/style.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/LectureComments.jsx",["700","701"],"import { Comment, Form, List, Typography, Input, Button, Avatar } from 'antd'\nimport React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\n\nimport styled from 'styled-components'\n\nimport Spinner from '../../../components/Spinner'\n\nimport {\n  getAllComments,\n  createComment,\n  deleteComment\n} from '../../../reducers/lectureCommentsReducer'\n\nimport { DateTime } from 'luxon'\n\nexport const Container = styled.div`\n  background-color: #fafafa;\n  border-radius: 10px;\n  padding: 20px 20px;\n`\n\nconst CommentForm = (props) => {\n  const { addComment, avatar } = props\n  const { courseId } = useParams()\n\n  const course = useSelector((state) =>\n    state.courses?.data?.find((course) => course.id === courseId)\n  )\n\n  const { status } = course || { status: 'published' }\n\n  const handleSubmit = (values) => {\n    addComment({ comment: values.comment })\n  }\n\n  return (\n    <Comment\n      avatar={avatar}\n      content={\n        <>\n          <Form onFinish={handleSubmit}>\n            <Form.Item name=\"comment\" rules={[{ required: true }]}>\n              <Input.TextArea allowClear={true} rows={4} />\n            </Form.Item>\n            <Form.Item>\n              {status !== 'archived' && (\n                <Button htmlType=\"submit\" type=\"primary\">\n                  Add Comment\n                </Button>\n              )}\n            </Form.Item>\n          </Form>\n        </>\n      }\n    />\n  )\n}\n\nconst LectureComments = (props) => {\n  const dispatch = useDispatch()\n\n  const { selectedLecture } = props\n  const { courseId } = useParams()\n\n  const comments = useSelector((state) => state.lectureComments.data.comments)\n  const loading = useSelector((state) => state.lectureComments.loading)\n  const user = useSelector((state) => state.auth.user)\n\n  useEffect(() => {\n    dispatch(getAllComments(courseId, selectedLecture.id))\n  }, [courseId, selectedLecture, dispatch])\n\n  if (loading)\n    return (\n      <Container>\n        <Spinner />\n      </Container>\n    )\n\n  const addComment = (moduleItemId, comment) => {\n    dispatch(createComment(courseId, moduleItemId, comment))\n  }\n\n  const removeComment = (moduleItemId, commentId) => {\n    dispatch(deleteComment(courseId, moduleItemId, commentId))\n  }\n\n  const getActions = (\n    currentUserId,\n    commentAuthorId,\n    moduleItemId,\n    commentId\n  ) => {\n    if (currentUserId === commentAuthorId)\n      return [\n        <Typography.Text\n          onClick={() => removeComment(moduleItemId, commentId)}\n          type=\"danger\"\n        >\n          Delete\n        </Typography.Text>\n      ]\n    return []\n  }\n\n  \n  return (\n    <Container>\n      <Typography.Title level={4}>Comments</Typography.Title>\n      <List\n        style={{ padding: '0px 8px' }}\n        dataSource={comments}\n        locale={{ emptyText: 'no comments' }}\n        renderItem={(comment) => (\n          <List.Item>\n            <Comment\n              style={{ color: '#000000d9' }}\n              actions={getActions(\n                user?. _id,\n                comment?.user?. _id,\n                selectedLecture.id,\n                comment.id\n              )}\n              author={\n                <Typography.Text strong>{comment.user?.name}</Typography.Text>\n              }\n              avatar={<Avatar src={comment.user?.photo} />}\n              content={comment.comment}\n              datetime={DateTime.fromISO(comment.updatedAt).toRelative()}\n            />\n          </List.Item>\n        )}\n      ></List>\n      <CommentForm\n        avatar={<Avatar src={user.photo} />}\n        addComment={(comment) => {\n          addComment(selectedLecture.id, comment)\n        }}\n        style={{ padding: '0px 8px' }}\n      />\n    </Container>\n  )\n}\n\nexport default LectureComments\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/components/ModuleList.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/VideoInfo.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/PlaylistMenu.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/Video.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/QuestionsSection.jsx",["702"],"import React, { useEffect, useState } from 'react'\nimport {\n  Button,\n  Divider,\n  message,\n  Modal,\n  Typography,\n  Upload,\n  Space\n} from 'antd'\n\nimport { InboxOutlined } from '@ant-design/icons'\nimport QuestionList from './QuestionList'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\nimport {\n  submitAnswers,\n  updateSubmission\n} from '../../../reducers/assessmentTakingReducer'\nimport FileDisplay from '../../../components/FileDisplay'\nimport s3Service from '../../../services/s3Service'\nimport SubmissionTimeTag from '../../../components/SubmissionTimeTag'\n\nimport { FlexSectionHeader } from '../../style'\nimport { DateTime } from 'luxon'\n\nconst { Title, Text } = Typography\nconst { Dragger } = Upload\n\nconst QuestionsSection = (props) => {\n  const dispatch = useDispatch()\n  const { courseId, assessmentId } = useParams()\n  const user = useSelector((state) => state.auth.user)\n\n  const answers = useSelector(\n    (state) => state.assessmentTaking.submission.answers\n  )\n\n  const [files, setFiles] = useState([])\n\n  const { submission } = props\n  const { assessment } = submission\n\n  useEffect(() => {\n    setFiles(\n      submission.files.map((file) => {\n        return { ...file, uid: file._id }\n      })\n    )\n  }, [])\n\n  const handleAnswerSubmit = (questionId, newAnswer) => {\n    dispatch(\n      submitAnswers(courseId, assessmentId, user._id, questionId, newAnswer)\n    )\n  }\n\n  const handleFileRemove = async (removedFile) => {\n    let s3URL = removedFile.url\n    if (!removedFile.error) {\n      setFiles(\n        files.filter((file) => {\n          if (file.uid === removedFile.uid || file._id === removedFile._id)\n            return false\n          else return true\n        })\n      )\n      await s3Service\n        .deleteFile(s3URL)\n        .then((response) =>\n          message.success('file deleted make sure to resubmit with new file')\n        )\n    }\n  }\n\n  const handleFileSubmit = ({ file, onSuccess, onError, onProgress }) => {\n    onProgress({ percent: 0 })\n    s3Service\n      .uploadFile(courseId, 'submissions', file.name, file, file.type)\n      .then((url) => {\n        onProgress({ percent: 100 })\n        onSuccess({ url })\n      })\n      .catch((error) => {\n        console.log(error)\n        onError(error)\n      })\n  }\n\n  const handleFinish = (alreadySumbitted) => {\n    if (assessment.submissionType === 'written' && files.length === 0) {\n      message.error(`must upload at least one file`)\n      return\n    }\n    if (assessment.type === 'Exam') {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: [\n          <div key=\"1\">Make sure all your answers are saved</div>,\n          <div key=\"2\">You won't be able to change them anymore</div>\n        ],\n\n        onOk() {\n          dispatch(\n            updateSubmission(courseId, assessmentId, user._id, {\n              files: files,\n              finished: true\n            })\n          )\n        }\n      })\n    } else if (assessment.type === 'Assignment' && alreadySumbitted) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: [\n          <div key=\"1\">Your previous submission will be discarded.</div>\n        ],\n\n        onOk() {\n          dispatch(\n            updateSubmission(courseId, assessmentId, user._id, {\n              files: files,\n              finished: true\n            })\n          )\n        }\n      })\n    } else {\n      dispatch(\n        updateSubmission(courseId, assessmentId, user._id, {\n          files: files,\n          finished: true\n        })\n      )\n    }\n  }\n\n  return (\n    <div\n      style={{\n        backgroundColor: '#fafafa',\n        width: '95%',\n        margin: '0 auto',\n        borderRadius: '10px',\n        padding: '20px 20px'\n      }}\n    >\n      <FlexSectionHeader>\n        <Space>\n          <Title level={3}>{assessment.title}</Title>\n          {submission.submittedAt && assessment.type === 'Assignment' && (\n            <>\n              <Text type=\"secondary\">Submitted at:</Text>\n              {DateTime.fromISO(submission.submittedAt).toLocaleString(\n                DateTime.DATETIME_MED\n              )}\n              <SubmissionTimeTag status={submission.status} />\n            </>\n          )}\n        </Space>\n        {submission.finished && (\n          <Button onClick={() => handleFinish(true)} type=\"default\">\n            <Text strong>Resubmit</Text>\n          </Button>\n        )}\n        {!submission.finished && (\n          <Button onClick={() => handleFinish()} type=\"primary\">\n            <Text style={{ color: 'white' }} strong>\n              Submit\n            </Text>\n          </Button>\n        )}\n      </FlexSectionHeader>\n\n      <Divider />\n\n      {assessment.questionsType === 'online' && (\n        <QuestionList\n          questions={assessment.questions}\n          answers={answers}\n          noOnlineAnswer={assessment.submissionType === 'written'}\n          handleAnswerSubmit={handleAnswerSubmit}\n        />\n      )}\n\n      {assessment.questionsType === 'file' && (\n        <FileDisplay files={assessment.files} />\n      )}\n\n      {assessment.submissionType === 'written' && (\n        <>\n          <Divider />\n          <Title level={5}>Upload your answer</Title>\n          <Dragger\n            onChange={(info) => {\n              let fileList = [...info.fileList]\n\n              const { status } = info.file\n              if (status === 'done')\n                message.success(`${info.file.name} file uploaded successfully.`)\n              else if (status === 'error')\n                message.error(`${info.file.name} file upload failed.`)\n\n              fileList = fileList.map((file) => {\n                if (file.response) {\n                  file.url = file.response.url\n                }\n                return file\n              })\n\n              setFiles(fileList)\n            }}\n            customRequest={handleFileSubmit}\n            onRemove={handleFileRemove}\n            fileList={files}\n          >\n            <p className=\"ant-upload-drag-icon\">\n              <InboxOutlined />\n            </p>\n            <p className=\"ant-upload-text\">\n              Click or drag file to this area to upload\n            </p>\n          </Dragger>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default QuestionsSection\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/spyLogic.jsx",["703","704"],"import React, { useRef, useCallback, useState, useEffect } from 'react'\nimport Webcam from 'react-webcam'\nimport { ReactMic } from '@cleandersonlobo/react-mic'\nimport { uploadFile } from 'react-s3'\nimport { useSelector } from 'react-redux'\nimport './../styles.css'\nimport cheatingService from '../../../services/cheatingService'\nimport ReactCountdownClock from 'react-countdown-clock'\nimport { useHistory } from 'react-router-dom'\n\nconst SpyLogic = (props) => {\n  const history = useHistory()\n  const webcamRef = useRef(null)\n  const user = useSelector((state) => state.auth.user)\n  const [cnt, setCnt] = useState(1)\n  const [record, setRecord] = useState(false)\n  const [frst, setFrst] = useState(true)\n\n  const { examId, timeRemaining } = props\n  // {\n  //   examId: '123456789',\n  //   timeRemaining: 0.1 * 3600\n  // }\n\n  /*\n  const S3_BUCKET = ''\n  const REGION = ''\n  const ACCESS_KEY = ''\n  const SECRET_ACCESS_KEY = ''\n  */\n  const S3_BUCKET = ''\n  const REGION = ''\n  const ACCESS_KEY = ''\n  const SECRET_ACCESS_KEY = ''\n\n  const config = {\n    bucketName: S3_BUCKET,\n    region: REGION,\n    dirName: user.name + ':' + user._id,\n    accessKeyId: ACCESS_KEY,\n    secretAccessKey: SECRET_ACCESS_KEY\n  }\n\n  const handleUpload = async (file) => {\n    uploadFile(file, config)\n      .then((data) => console.log(data))\n      .catch((err) => console.error(err))\n  }\n\n  const startRecording = () => {\n    setRecord(true)\n  }\n\n  const stopRecording = () => {\n    setRecord(false)\n  }\n\n  const eventHandler = () => {\n    document.title = document.hidden\n      ? window.close()\n      : \"DON'T go away\"\n  }\n\n  useEffect(() => {\n    document.addEventListener('visibilitychange', eventHandler)\n    try {\n      cheatingService.clear()\n    } catch {\n      console.log('no pre counter fount')\n    }\n  }, [])\n\n  useEffect(() => {\n    return () => {\n      document.removeEventListener('visibilitychange', eventHandler)\n      stopRecording()\n      history.goBack()\n    }\n  }, [history])\n\n  const onStop = async (recordedBlob) => {\n    console.log('recordedBlob is: ', recordedBlob)\n    const blob = await fetch(recordedBlob.blobURL).then((res) => res.blob())\n    blob.name = 'recording.mp3'\n    handleUpload(blob)\n  }\n\n  const capture = useCallback(async () => {\n    if(frst){\n      setFrst(false)\n    }else{\n      if (cnt === 1) {\n        startRecording()\n      }\n      setCnt(cnt + 1)\n      const imageSrc = webcamRef.current.getScreenshot()\n      const blob = await fetch(imageSrc).then((res) => res.blob())\n      blob.name = cnt.toString() + '.jpeg'\n      if (cnt === 7) {\n        setCnt(1)\n        stopRecording()\n      }\n      console.log(blob)\n      handleUpload(blob)\n      cheatingService.batchInc(examId)\n    }\n  }, [webcamRef, cnt, frst])\n\n  //useEffect(setInterval(() => {capture()}, 2000), [webcamRef, cnt])\n\n  useEffect(() => {\n    let intervalId\n\n    intervalId = setInterval(() => {\n      capture()\n    }, 1500)\n\n    return () => clearInterval(intervalId)\n  }, [webcamRef, cnt, frst])\n\n  return (\n    <div className=\"container\">\n      <Webcam\n        audio={false}\n        width={240}\n        height={240}\n        ref={webcamRef}\n        screenshotFormat=\"image/jpeg\"\n        videoConstraints={{\n          width: 240,\n          height: 240,\n          facingMode: 'user'\n        }}\n      />\n      {/*<button onClick={capture}>Capture</button>*/}\n      <ReactMic\n        record={record}\n        className=\"sound-wave\"\n        mimeType=\"audio/mp3\"\n        onStop={onStop}\n        echoCancellation={true}\n        autoGainControl={true}\n        noiseSuppression={true}\n      />\n      <ReactCountdownClock\n        seconds={timeRemaining}\n        color=\"#000\"\n        alpha={0.9}\n        size={240}\n        onComplete={() => {\n          stopRecording()\n          cheatingService.clear()\n          document.removeEventListener('visibilitychange', eventHandler)\n          window.close()\n        }}\n      />\n    </div>\n  )\n}\n\nexport default SpyLogic\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/discussions/components/discussionCard.jsx",["705","706","707","708","709","710","711"],"import React, { useState } from 'react'\nimport { Card, Button, Input,Tag } from 'antd'\nimport { useDispatch } from 'react-redux'\nimport Meta from 'antd/lib/card/Meta'\nimport Avatar from 'antd/lib/avatar/avatar'\nimport AllComments from './commentCard'\nimport { CheckCircleOutlined } from '@ant-design/icons';\n\nimport {\n  removeDiscussion,\n  addComment\n} from '../../../reducers/discussionReducer'\nimport './../styles.css'\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css'\n\nimport 'draft-js/dist/Draft.css'; // Import Draft.js styles\nimport { Editor, EditorState, ContentState, convertFromRaw } from 'draft-js';\n\nconst modules = {\n  toolbar: [\n    [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n    ['bold', 'italic', 'underline'],\n    ['link' ],\n  ],\n};\n\nconst formats = [\n  'header',\n  'font',\n  'list',\n  'bold',\n  'italic',\n  'underline',\n  'link'\n \n];\n\nconst DiscussionCard = ({ discussion, user }) => {\n  const dispatch = useDispatch()\n  const [commText, setcommText] = useState('')\n  //const contentState = convertFromRaw(JSON.parse(discussion.data));\n\n  //const [editorState, setEditorState] = useState(EditorState.createEmpty()); // Add editorState\n\n\n  const setEditorHtml = (html) => {\n    setcommText(html);\n  };\n\n  const onPost = () => {\n    if (commText !== '') {\n      // const plainText = editorState.getCurrentContent().getPlainText('\\u0001');\n      dispatch(addComment(discussion._id,commText,user))\n      setcommText('')\n      // setEditorState(EditorState.createEmpty());\n  } else {console.log('Can not post empty comment')\n  }}\n\n  const onTxtChange = (txt) => {\n    setcommText(txt.target.value)\n  }\n\n  const formatDate = (date) => {\n    // Function to format the date as needed\n    // You can use libraries like moment.js for a more comprehensive solution\n    const diffInMinutes = Math.floor((Date.now() - new Date(date)) / (1000 * 60));\n    \n    if (diffInMinutes < 60) {\n      return `${diffInMinutes} minutes ago`;\n    } else if (diffInMinutes < 24 * 60) {\n      const hours = Math.floor(diffInMinutes / 60);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInMinutes / (24 * 60));\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n\n  const renderAnnouncementContent = () => {\n    const content = discussion.data;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, 'text/html');\n    const imageElements = doc.querySelectorAll('img');\n  \n    if (imageElements.length > 0) {\n      return (\n        <div>\n          {Array.from(imageElements).map((imgElement, index) => (\n            <img\n              key={index}\n              src={imgElement.getAttribute('src')}\n              alt={`Image ${index + 1}`}\n            />\n          ))}\n        </div>\n      );\n    } else {\n      return <div dangerouslySetInnerHTML={{ __html: content }} />;\n    }\n  };\n  \n  return (\n    <div className=\"container\">\n      <Card\n        hoverable\n        className=\"customcard\"\n        title={\n          <div>\n            <Meta\n              avatar={<Avatar src={discussion.user && discussion.user.photo} />}\n              //avatar={<Avatar src={userAvatar} />}\n              title={\n                <span>\n                   {discussion.isAnonymous==='Yes'? 'Anonymous' : discussion.user && discussion.user.name}\n                  \n                  {discussion.user && discussion.user.role === 'instructor' ? (\n                    <Tag color=\"cyan\" style={{ marginLeft: '8px' }}>\n                      INSTRUCTOR\n                    </Tag>\n                  ) : (\n                    <Tag color=\"orange\" style={{ marginLeft: '8px' }}>\n                      STUDENT\n                    </Tag>\n                  )}\n                \n                </span>\n              }\n            />\n            {discussion.user && discussion.user._id === user._id && (\n              <Button\n                disabled={!(discussion.user._id === user._id)}\n                className=\"deleteButton\"\n                onClick={() => {\n                  dispatch(removeDiscussion(discussion._id))\n                }}\n              >\n                Delete\n              </Button>\n            )}\n            \n          </div>\n        }\n      >\n       <div>\n        <span style={{ display: 'flex', alignItems: 'center' }}>\n          <span style={{ fontWeight: 'bold', marginBottom: '5px', fontSize: '18px' }}>\n            {discussion.title}\n          </span>\n          {/* Add the green tick tag for answered discussions */}\n          {discussion.answered && (\n            <Tag color=\"brown\" style={{ marginLeft: '8px' }}>\n              <CheckCircleOutlined /> Answered\n            </Tag>\n          )}\n          {discussion.isPrivate && (\n            <Tag color=\"#ff5757\" style={{ marginLeft: '8px' }}>\n              PRIVATE\n            </Tag>)}\n        </span>\n      </div>\n        <div style={{ fontSize: '12px', fontWeight: 'italic',color: 'green', marginTop: '5px' }}>\n          {formatDate(discussion.createdAt)} in <strong>{discussion.category}</strong>\n        </div>\n        {renderAnnouncementContent()}\n        <div className=\"dis\" style={{ whiteSpace: 'pre-line' }}></div>\n        {/* <Editor\n            editorState={EditorState.createWithContent(contentState)}\n            readOnly={true} />// Make the content read-only */}\n        <Card\n          size=\"small\"\n          type=\"inner\"\n          className=\"commentcard\"\n          title=\"comments\"\n        >\n          <AllComments\n            comments={discussion.comments}\n            dId={discussion._id}\n            Luser={user}\n          />\n        </Card>\n        <div style={{ marginBottom: '10px' }}>\n        \n        <ReactQuill\n          modules={modules}\n          formats={formats}\n          value={commText}\n          onChange={setEditorHtml}\n          placeholder=\"Write your comment!\"\n       />\n      </div>\n        {/* <div className=\"container\">\n        <textarea\n            rows=\"4\"  // You can adjust the number of rows\n            value={commText}\n            onChange={onTxtChange}\n            placeholder=\"Add your comment...\"\n            className=\"txt\"\n          ></textarea> */}\n          <Button onClick={onPost}>Add Comment</Button>\n        \n      </Card>\n    </div>\n \n    )\n}\n\nexport default DiscussionCard\n\n\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/announcements/components/announcementCard.jsx",["712"],"import React from 'react'\nimport { Card, Button, Tag} from 'antd'\nimport { useDispatch } from 'react-redux'\nimport Meta from 'antd/lib/card/Meta'\nimport Avatar from 'antd/lib/avatar/avatar'\nimport { removeAnnouncement } from '../../../reducers/announcementsReducer'\n\nconst AnnouncementCard = ({ announcement, user }) => {\n  const dispatch = useDispatch()\n\n  const formatDate = (date) => {\n    // Function to format the date as needed\n    // You can use libraries like moment.js for a more comprehensive solution\n    const diffInMinutes = Math.floor((Date.now() - new Date(date)) / (1000 * 60));\n    \n    if (diffInMinutes < 60) {\n      return `${diffInMinutes} minutes ago`;\n    } else if (diffInMinutes < 24 * 60) {\n      const hours = Math.floor(diffInMinutes / 60);\n      return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;\n    } else {\n      const days = Math.floor(diffInMinutes / (24 * 60));\n      return `${days} ${days === 1 ? 'day' : 'days'} ago`;\n    }\n  };\n\n  const renderAnnouncementContent = () => {\n    const content = announcement.data;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, 'text/html');\n    const imageElements = doc.querySelectorAll('img');\n  \n    if (imageElements.length > 0) {\n      return (\n        <div>\n          {Array.from(imageElements).map((imgElement, index) => (\n            <img\n              key={index}\n              src={imgElement.getAttribute('src')}\n              alt={`Image ${index + 1}`}\n            />\n          ))}\n        </div>\n      );\n    } else {\n      return <div dangerouslySetInnerHTML={{ __html: content }} />;\n    }\n  };\n  \n\n  return (\n    <div className=\"container\">\n      <Card\n        hoverable\n        className=\"custom-card\"\n        title={announcement.user ? (\n          <div>\n           \n            <Meta\n              avatar={<Avatar src={announcement.user.photo} />}\n              title={\n                <span>\n                { announcement.user.name}\n               \n               {announcement.user.role === 'instructor' ? (\n                 <Tag color=\"cyan\" style={{ marginLeft: '8px' }}>\n                   INSTRUCTOR\n                 </Tag>\n               ) : (\n                 <Tag color=\"orange\" style={{ marginLeft: '8px' }}>\n                   STUDENT\n                 </Tag>\n               )}\n             \n             </span>\n           }\n            />\n            {announcement.user._id === user._id && (\n              <Button\n                disabled={!(announcement.user._id === user._id)}\n                className=\"deleteButton\"\n                onClick={() => {\n                  dispatch(removeAnnouncement(announcement._id))\n                }}\n              >\n                delete\n              </Button>\n            )}\n          </div>\n   ):( <div>User information not available</div>\n   )}\n      >\n        <div>\n          <span style={{ fontWeight: 'bold', marginBottom: '5px', fontSize: '18px' }}>\n            {announcement.title}\n          </span>\n          </div>\n          <div style={{ fontSize: '12px', fontWeight: 'italic',color: 'green', marginTop: '5px' }}>\n          {formatDate(announcement.createdAt)} \n        </div>\n        {renderAnnouncementContent()}\n        {/* <div className=\"annData\"></div> */}\n      </Card>\n    </div>\n  )\n}\n\nexport default AnnouncementCard\n","/Users/mbuto/Downloads/Corner-master/Client/src/services/cheatingService.js",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/lectures/components/VideoItem.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/components/ModuleItemForm.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/modules/components/ModuleItem.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/discussions/components/commentCard.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/SubmissionTimeTag.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/FileDisplay.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/QuestionList.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/instructorGB.jsx",["713","714","715"],"import { Table, Tag, Space, Button } from 'antd'\nimport React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport StudentGradeBook from './studentGB'\nimport SummaryTable from './summaryGB'\nimport InfoTable from './infoTable'\nimport { PieChart } from 'reaviz'\n\nconst InstructorGradeBook = ({ courseId, id }) => {\n  const [student, setStudent] = useState('')\n  const [showSt, setShowst] = useState(false)\n  const [fltr, setFltr] = useState('')\n  const [showInfo, setShowInfo] = useState(false)\n  const [vis, setVis] = useState(true)\n  const [fVis, setFVis] = useState(false)\n\n  const submitions = useSelector((state) =>\n    state.courseGradebook.filter((v) => v.assessment != null)\n  )\n\n  const columns = [\n    {\n      title: 'Student',\n      dataIndex: 'student',\n      key: 'student',\n      render: (text) => (\n        <a\n          onClick={() => {\n            console.log(text._id)\n            setStudent(text._id)\n            setVis(false)\n            setFVis(false)\n            setShowst(true)\n          }}\n        >\n          {text?.name}\n        </a>\n      )\n    },\n    {\n      title: 'Type',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => <span>{text.type}</span>\n    },\n    {\n      title: 'Title',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => (\n        <a\n          onClick={() => {\n            console.log(text.title)\n            setFltr(text.title)\n            setVis(false)\n            setFVis(false)\n            setShowInfo(true)\n          }}\n        >\n          {text.title}\n        </a>\n      )\n    },\n    {\n      title: 'Score',\n      dataIndex: 'score',\n      key: 'score',\n      sorter: {\n        compare: (a, b) => a.score - b.score\n      }\n    },\n    {\n      title: 'Max Score',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => <span>{text.maxScore}</span>,\n      sorter: {\n        compare: (a, b) => a.assessment.maxScore - b.assessment.maxScore\n      }\n    },\n    {\n      title: 'Weight',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => <span>{String(text.weight * 100) + '%'}</span>,\n      sorter: {\n        compare: (a, b) =>\n          Number(a.assessment.weight) - Number(b.assessment.weight)\n      }\n    },\n    {\n      title: 'Graded At',\n      key: 'gradedAt',\n      sorter: {\n        compare: (a, b) => new Date(a.gradedAt) - new Date(b.gradedAt)\n      },\n      render: (text, record) => (\n        <Space size=\"middle\">\n          {new Date(record.gradedAt).toLocaleString()}\n        </Space>\n      )\n    }\n  ]\n\n  const getUnique = (arr) => {\n    var unique = []\n    var res = []\n    for (let i = 0; i < arr.length; i++) {\n      if (!unique.includes(arr[i].assessment.id)) {\n        unique.push(arr[i].assessment.id)\n        res.push(arr[i])\n      }\n    }\n    return res\n  }\n\n  return (\n    <div>\n      {vis && (\n        <>\n          <PieChart\n            width={350}\n            height={250}\n            data={getUnique(submitions)\n              .map((v) => {\n                let res = {\n                  key: v.assessment.title,\n                  data: Number(v.assessment.weight * 100)\n                }\n                return res\n              })\n              .sort(function (a, b) {\n                return b.data - a.data\n              })}\n          />\n          <Button\n            onClick={() => {\n              setShowInfo(false)\n              setFVis(true)\n              setVis(false)\n              setFltr('')\n            }}\n          >\n            Open Summary Gradebook\n          </Button>\n          <Table\n            rowKey={(record) => record?.id}\n            columns={columns}\n            dataSource={submitions}\n            bordered\n            title={() => {\n              return 'The Instructor GradeBook'\n            }}\n            pagination={false}\n          />\n        </>\n      )}\n      {showInfo && (\n        <>\n          <Button\n            onClick={() => {\n              setShowInfo(false)\n              setFVis(false)\n              setVis(true)\n              setFltr('')\n            }}\n          >\n            Close Information Gradebook\n          </Button>\n          <InfoTable courseId={courseId} data={submitions} filter={fltr} />\n        </>\n      )}\n      {showSt && (\n        <>\n          <Button\n            onClick={() => {\n              setShowst(false)\n              setShowInfo(false)\n              setFVis(false)\n              setVis(true)\n              setStudent('')\n            }}\n          >\n            Close Student Gradebook\n          </Button>\n          <StudentGradeBook courseId={courseId} id={student} />\n        </>\n      )}\n      {fVis && (\n        <>\n          <Button\n            onClick={() => {\n              setShowst(false)\n              setShowInfo(false)\n              setFVis(false)\n              setVis(true)\n              setStudent('')\n            }}\n          >\n            Close Summary Gradebook\n          </Button>\n          <SummaryTable courseId={courseId} />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default InstructorGradeBook\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/studentGB.jsx",["716","717"],"import { Table, Tag, Space } from 'antd'\nimport { BarChart, GridlineSeries, Gridline } from 'reaviz'\nimport { useSelector, useDispatch } from 'react-redux'\nimport React from 'react'\n\nconst StudentGradeBook = ({ courseId, id }) => {\n  const data = useSelector(\n    (state) => state.summaryGradebook.filter((val) => val.student._id === id)[0]\n  )\n\n  const columns = [\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type'\n    },\n    {\n      title: 'Name',\n      dataIndex: 'title',\n      key: 'name'\n    },\n    {\n      title: 'Score',\n      dataIndex: 'score',\n      key: 'score',\n      sorter: {\n        compare: (a, b) => a.score - b.score\n      }\n    },\n    {\n      title: 'Max Score',\n      dataIndex: 'maxScore',\n      key: 'maxScore',\n      sorter: {\n        compare: (a, b) => a.maxScore - b.maxScore\n      }\n    },\n    {\n      title: 'Weight',\n      dataIndex: 'weight',\n      key: 'weight',\n      sorter: {\n        compare: (a, b) => Number(a.weight) - Number(b.weight)\n      },\n      render: (text) => <span>{String(text * 100) + '%'}</span>\n    },\n    {\n      title: 'Graded At',\n      key: 'gradedAt',\n      sorter: {\n        compare: (a, b) => new Date(a.gradedAt) - new Date(b.gradedAt)\n      },\n      render: (text, record) => (\n        <Space size=\"middle\">\n          {new Date(record.gradedAt).toLocaleString()}\n        </Space>\n      )\n    }\n  ]\n\n  const fCol = [\n    {\n      title: 'Assignments',\n      dataIndex: 'assignmentsScore',\n      key: 'assignmentsScore'\n    },\n    {\n      title: 'Exams',\n      dataIndex: 'examsScore',\n      key: 'examsScore'\n    },\n    /*{\n      title: 'Final Exam',\n      dataIndex: 'finalExamsScore',\n      key: 'finalExamsScore'\n    },*/\n    {\n      title: 'Total Score',\n      dataIndex: 'totalScore',\n      key: 'totalScore'\n    },\n    {\n      title: 'Grade',\n      dataIndex: 'grade',\n      key: 'grade'\n    }\n  ]\n\n  return (\n    <div>\n      <BarChart\n        width={350}\n        height={250}\n        data={data?.grades\n          ?.map((v) => {\n            let res = {\n              key: v.title,\n              data: v.score / v.maxScore\n            }\n            return res\n          })\n          .sort(function (a, b) {\n            return b.data - a.data\n          })}\n        gridlines={<GridlineSeries line={<Gridline direction=\"y\" />} />}\n      />\n      <Table\n        rowKey={(record) => record?.id}\n        columns={columns}\n        dataSource={data?.grades}\n        bordered\n        title={() => {\n          return 'The Student GradeBook'\n        }}\n        footer={() => {\n          return (\n            <Table\n              rowKey={(record) => record?.id}\n              columns={fCol}\n              dataSource={[data]}\n              bordered\n              title={() => 'The course summary'}\n              pagination={false}\n            />\n          )\n        }}\n        pagination={false}\n      />\n    </div>\n  )\n}\n\nexport default StudentGradeBook\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/GradingQuestionList.jsx",["718"],"import React, { useEffect } from 'react'\nimport WrittenQuestion from './WrittenQuestion'\nimport ChoiceQuestion from './ChoiceQuestion'\n\nimport { Empty, Form, Input } from 'antd'\n\nconst GradingQuestionList = (props) => {\n  const { form, answers } = props\n\n  useEffect(() => {\n    form.resetFields()\n  }, [answers])\n\n  return (\n    <>\n      <Form.List\n        name=\"answers\"\n        initialValue={answers.map((answer) => ({\n          ...answer,\n          originQuestion: answer.originQuestion.id\n        }))}\n      >\n        {(fields) => {\n          return (\n            <div>\n              {fields.map((field) => {\n                console.log(field)\n                return (\n                  <div key={field.name}>\n                    <Form.Item\n                      {...field}\n                      key={[field.name, 'originQuestion']}\n                      name={[field.name, 'originQuestion']}\n                      hidden={true}\n                    >\n                      <Input />\n                    </Form.Item>\n\n                    <Form.Item\n                      {...field}\n                      key={[field.name, 'studentAnswer']}\n                      name={[field.name, 'studentAnswer']}\n                      hidden={true}\n                    >\n                      <Input />\n                    </Form.Item>\n\n                    {(() => {\n                      if (answers?.[field.name]?.originQuestion.type === 'MCQ')\n                        return (\n                          <ChoiceQuestion\n                            key={field.name}\n                            question={answers[field.name].originQuestion}\n                            studentAnswer={answers[field.name].studentAnswer}\n                            field={field}\n                          />\n                        )\n                      if (answers?.[field.name]?.originQuestion.type === 'Esay')\n                        return (\n                          <WrittenQuestion\n                            key={field.name}\n                            question={answers[field.name].originQuestion}\n                            studentAnswer={answers[field.name].studentAnswer}\n                            field={field}\n                          />\n                        )\n                      return <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                    })()}\n                  </div>\n                )\n              })}\n            </div>\n          )\n        }}\n      </Form.List>\n    </>\n  )\n}\n\nexport default GradingQuestionList\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/FileDispaly.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/WrittenQuestionForm.jsx",["719","720"],"import { Button, Divider, Form, Input, Space, Typography } from 'antd'\nimport React, { useEffect, useState } from 'react'\n\nimport { CloseCircleOutlined, CheckCircleOutlined } from '@ant-design/icons'\n\nconst { Title, Text } = Typography\n\nconst WrittenQuestionForm = (props) => {\n  const [form] = Form.useForm()\n\n  const { question, answer, handleAnswerSubmit, noOnlineAnswer } = props\n\n  const [submitted, setSubmitted] = useState(answer ? true : undefined)\n\n  useEffect(() => {\n    setSubmitted(answer ? true : undefined)\n  }, [answer])\n\n  useEffect(() => {\n    form.setFieldsValue({\n      ans: answer?.studentAnswer || ''\n    })\n  }, [])\n\n  useEffect(() => {\n    if (submitted === false) {\n      setTimeout(() => {\n        form.submit()\n      }, 2000)\n    }\n  }, [submitted])\n\n  const handleFormSubmit = (values) => {\n    handleAnswerSubmit(question.id, values.ans)\n  }\n\n  const handleSubmittedState = () => {\n    setSubmitted(false)\n  }\n\n  return (\n    <div\n      style={{\n        minWidth: '400px',\n        backgroundColor: '#eee',\n        borderRadius: '10px',\n        padding: '20px 20px',\n        width: '100%',\n        marginTop: '20px'\n      }}\n    >\n      <Form form={form} onFinish={handleFormSubmit} name=\"question\">\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'flex-start'\n          }}\n        >\n          <Space>\n            <Title style={{ margin: '0' }} level={5}>\n              Question No: {question.question_number}\n            </Title>\n          </Space>\n          <Space align=\"start\">\n            <Text strong>Points: {question.points}</Text>\n          </Space>\n        </div>\n\n        <div style={{ marginTop: '16px' }}>\n          <Title level={4}>{question.question_text}</Title>\n        </div>\n        {!noOnlineAnswer && (\n          <>\n            <Form.Item name=\"ans\" style={{ width: '60%', marginTop: '28px' }}>\n              <Input.TextArea\n                onChange={handleSubmittedState}\n                rows={4}\n                placeholder=\"Answer\"\n              />\n            </Form.Item>\n            <Divider style={{ border: '1px solid #ccc' }} />\n\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center'\n              }}\n            >\n              <Space>\n                <Button\n                  disabled={submitted}\n                  icon={\n                    submitted ? (\n                      <CheckCircleOutlined style={{ color: '#52c41a' }} />\n                    ) : (\n                      <CloseCircleOutlined />\n                    )\n                  }\n                  onClick={() => form.submit()}\n                >\n                  Save\n                </Button>\n              </Space>\n            </div>\n          </>\n        )}\n      </Form>\n    </div>\n  )\n}\n\nexport default WrittenQuestionForm\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentTaking/components/ChoiceQuestionForm.jsx",["721","722"],"import { Button, Divider, Form, Radio, Space, Typography } from 'antd'\nimport React, { useEffect, useState } from 'react'\n\nimport { CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons'\n\nconst { Title, Text } = Typography\n\nconst ChoiceQuestionForm = (props) => {\n  const { question, answer, handleAnswerSubmit, noOnlineAnswer } = props\n\n  const [form] = Form.useForm()\n\n  const [submitted, setSubmitted] = useState(answer ? true : undefined)\n\n  useEffect(() => {\n    setSubmitted(answer ? true : undefined)\n  }, [answer])\n\n  useEffect(() => {\n    form.setFieldsValue({\n      ans: answer?.studentAnswer\n    })\n  }, [])\n\n  useEffect(() => {\n    if (submitted === false) {\n      setTimeout(() => {\n        form.submit()\n      }, 2000)\n    }\n  }, [submitted])\n\n  const handleFormSubmit = (values) => {\n    handleAnswerSubmit(question.id, values.ans)\n  }\n\n  const handleSubmittedState = () => {\n    setSubmitted(false)\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          minWidth: '400px',\n          backgroundColor: '#eee',\n          borderRadius: '5px',\n          padding: '20px 20px',\n          width: '100%',\n          marginTop: '20px'\n        }}\n      >\n        <Form form={form} onFinish={handleFormSubmit} name=\"question\">\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'flex-start'\n            }}\n          >\n            <Space>\n              <Title style={{ margin: '0' }} level={5}>\n                Question No: {question.question_number}\n              </Title>\n            </Space>\n            <Space align=\"start\">\n              <Text strong>Points: {question.points}</Text>\n            </Space>\n          </div>\n\n          <div style={{ marginTop: '16px' }}>\n            <Title level={4}>{question.question_text}</Title>\n          </div>\n\n          {noOnlineAnswer && (\n            <Space\n              style={{ marginTop: '24px' }}\n              direction=\"vertical\"\n              size=\"large\"\n            >\n              {question.choices?.map((choice, index) => (\n                <div key={index}>\n                  <Radio disabled={true} />\n                  {choice}\n                </div>\n              ))}\n            </Space>\n          )}\n\n          {!noOnlineAnswer && (\n            <>\n              <Form.Item name=\"ans\">\n                <Radio.Group\n                  onChange={handleSubmittedState}\n                  style={{ marginTop: '24px' }}\n                >\n                  <Space direction=\"vertical\" size=\"large\">\n                    {question.choices?.map((choice, index) => (\n                      <div key={index}>\n                        <Radio value={choice}>{choice}</Radio>\n                      </div>\n                    ))}\n                  </Space>\n                </Radio.Group>\n              </Form.Item>\n\n              <Divider\n                style={{ border: '1px solid #ccc', margin: '20px 0px' }}\n              />\n\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center'\n                }}\n              >\n                <Space>\n                  <Button\n                    disabled={submitted}\n                    icon={\n                      submitted ? (\n                        <CheckCircleOutlined style={{ color: '#52c41a' }} />\n                      ) : (\n                        <CloseCircleOutlined />\n                      )\n                    }\n                    onClick={() => form.submit()}\n                  >\n                    Save\n                  </Button>\n                </Space>\n              </div>\n            </>\n          )}\n        </Form>\n      </div>\n    </>\n  )\n}\n\nexport default ChoiceQuestionForm\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/ChoiceQuestion.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/assessmentGrading/components/WrittenQuestion.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/infoTable.jsx",["723","724"],"import { Table, Space, Button } from 'antd'\nimport { BarChart, GridlineSeries, Gridline } from 'reaviz'\nimport StudentGradeBook from './studentGB'\nimport React, { useState } from 'react'\n\nconst InfoTable = ({ courseId, data, filter }) => {\n  const [student, setStudent] = useState('')\n  const [showSt, setShowst] = useState(false)\n  const [vis, setVis] = useState(true)\n  const idata = data.filter((v) => {\n    return v.assessment.title == filter\n  })\n  const columns = [\n    {\n      title: 'Student',\n      dataIndex: 'student',\n      key: 'student',\n      render: (text) => (\n        <a\n          onClick={() => {\n            setStudent(text._id)\n            setVis(false)\n            setShowst(true)\n          }}\n        >\n          {text.name}\n        </a>\n      )\n    },\n    {\n      title: 'Title',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => <span>{text.title}</span>\n    },\n    {\n      title: 'Type',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => <span>{text.type}</span>\n    },\n    {\n      title: 'Score',\n      dataIndex: 'score',\n      key: 'score',\n      sorter: {\n        compare: (a, b) => a.score - b.score\n      }\n    },\n    {\n      title: 'Max Score',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => <span>{text.maxScore}</span>,\n      sorter: {\n        compare: (a, b) => a.assessment.maxScore - b.assessment.maxScore\n      }\n    },\n    {\n      title: 'Weight',\n      dataIndex: 'assessment',\n      key: 'assessment',\n      render: (text) => <span>{String(text.weight * 100) + '%'}</span>,\n      sorter: {\n        compare: (a, b) =>\n          Number(a.assessment.weight) - Number(b.assessment.weight)\n      }\n    },\n    {\n      title: 'Graded At',\n      key: 'gradedAt',\n      sorter: {\n        compare: (a, b) => new Date(a.gradedAt) - new Date(b.gradedAt)\n      },\n      render: (text, record) => (\n        <Space size=\"middle\">\n          {new Date(record.gradedAt).toLocaleString()}\n        </Space>\n      )\n    }\n  ]\n\n  return (\n    <>\n      {vis && (\n        <>\n          <BarChart\n            width={350}\n            height={250}\n            data={idata\n              .map((v) => {\n                let res = {\n                  key: v.student.name,\n                  data: v.score / v.assessment.maxScore\n                }\n                return res\n              })\n              .sort(function (a, b) {\n                return b.data - a.data\n              })}\n            gridlines={<GridlineSeries line={<Gridline direction=\"y\" />} />}\n          />\n          <Table\n            columns={columns}\n            dataSource={idata}\n            bordered\n            pagination={false}\n          />\n        </>\n      )}\n      {showSt && (\n        <>\n          <Button\n            onClick={() => {\n              setShowst(false)\n              setVis(true)\n              setStudent('')\n            }}\n          >\n            Close Student Gradebook\n          </Button>\n          <StudentGradeBook courseId={courseId} id={student} />\n        </>\n      )}\n    </>\n  )\n}\n\nexport default InfoTable\n","/Users/mbuto/Downloads/Corner-master/Client/src/views/gradeBook/components/summaryGB.jsx",["725","726","727","728"],"import { Table, Tag, Space, Button } from 'antd'\nimport {\n  BarChart,\n  GridlineSeries,\n  Gridline,\n  BarSeries,\n  Bar,\n  GuideBar\n} from 'reaviz'\nimport StudentGradeBook from './studentGB'\nimport React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport './../styles.css'\n\nconst SummaryTable = ({ courseId }) => {\n  const [student, setStudent] = useState('')\n  const [showSt, setShowst] = useState(false)\n  const [vis, setVis] = useState(true)\n\n  const studentGrades = useSelector((state) => state.summaryGradebook)\n\n  const fCol = [\n    {\n      title: 'Student',\n      dataIndex: 'student',\n      key: 'student',\n      render: (text) => (\n        <a\n          onClick={() => {\n            setStudent(text._id)\n            setVis(false)\n            setShowst(true)\n          }}\n        >\n          {text.name}\n        </a>\n      )\n    },\n    {\n      title: 'Assignments',\n      dataIndex: 'assignmentsScore',\n      key: 'assignmentsScore',\n      sorter: {\n        compare: (a, b) =>\n          Number(a.assignmentsScore.slice(0, -1)) -\n          Number(b.assignmentsScore.slice(0, -1))\n      }\n    },\n    {\n      title: 'Exams',\n      dataIndex: 'examsScore',\n      key: 'examsScore',\n      sorter: {\n        compare: (a, b) =>\n          Number(a.examsScore.slice(0, -1)) - Number(b.examsScore.slice(0, -1))\n      }\n    },\n    /*{\n      title: 'Final Exam',\n      dataIndex: 'finalExamsScore',\n      key: 'finalExamsScore',\n      sorter: {\n        compare: (a, b) =>\n          Number(a.finalExamsScore.slice(0, -1)) - Number(b.finalExamsScore.slice(0, -1))\n      }\n    },*/\n    {\n      title: 'Total Score',\n      dataIndex: 'totalScore',\n      key: 'totalScore',\n      sorter: {\n        compare: (a, b) =>\n          Number(a.totalScore.slice(0, -1)) - Number(b.totalScore.slice(0, -1))\n      }\n    },\n    {\n      title: 'Grade',\n      dataIndex: 'grade',\n      key: 'grade'\n    }\n  ]\n\n  const calculateDistribution = (arr) => {\n    var a = [],\n      b = [],\n      prev\n    var res = []\n    arr.sort(function (a, b) {\n      return (\n        Number(a.totalScore.slice(0, -1)) - Number(b.totalScore.slice(0, -1))\n      )\n    })\n    for (var i = 0; i < arr.length; i++) {\n      if (Number(arr[i].totalScore.slice(0, -1)) !== prev) {\n        a.push(Number(arr[i].totalScore.slice(0, -1)))\n        b.push(1)\n      } else {\n        b[b.length - 1]++\n      }\n      prev = Number(arr[i].totalScore.slice(0, -1))\n    }\n\n    for (var i = 0; i < a.length; i++) {\n      res.push({ key: a[i] + '%', data: b[i] })\n    }\n    console.log(res)\n    return res\n  }\n\n  return (\n    <>\n      {vis && (\n        <>\n          <div className=\"barRow\">\n            <BarChart\n              className=\"bar1\"\n              width={350}\n              height={250}\n              data={studentGrades\n                .map((v) => {\n                  let res = {\n                    key: v.student.name,\n                    data: Number(v.totalScore.slice(0, -1))\n                  }\n                  return res\n                })\n                .sort(function (a, b) {\n                  return b.data - a.data\n                })}\n              gridlines={<GridlineSeries line={<Gridline direction=\"y\" />} />}\n            />\n            <BarChart\n              className=\"bar2\"\n              width={350}\n              height={250}\n              data={calculateDistribution(studentGrades)}\n              gridlines={<GridlineSeries line={<Gridline direction=\"y\" />} />}\n              series={\n                <BarSeries\n                  padding={Number('Padding', 0.1)}\n                  bar={\n                    <Bar\n                      gradient={Bar.defaultProps.gradient}\n                      guide={<GuideBar />}\n                    />\n                  }\n                />\n              }\n            />\n          </div>\n          <Table\n            rowKey={(record) => record.id}\n            columns={fCol}\n            dataSource={studentGrades}\n            bordered\n            pagination={false}\n            title={() => 'students summary gradebook'}\n          />\n        </>\n      )}\n      {showSt && (\n        <>\n          <Button\n            onClick={() => {\n              setShowst(false)\n              setVis(true)\n              setStudent('')\n            }}\n          >\n            Close Student Gradebook\n          </Button>\n          <StudentGradeBook courseId={courseId} id={student} />\n        </>\n      )}\n    </>\n  )\n}\n\nexport default SummaryTable\n","/Users/mbuto/Downloads/Corner-master/Client/src/components/ForgotPassword/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/components/ResetPassword/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/pages/ForgetPassword/index.jsx",[],"/Users/mbuto/Downloads/Corner-master/Client/src/views/upload/index.jsx",[],["729","730"],"/Users/mbuto/Downloads/Corner-master/Client/src/components/FileUpload/index.jsx",[],{"ruleId":"731","severity":1,"message":"732","line":11,"column":9,"nodeType":"733","messageId":"734","endLine":11,"endColumn":29},{"ruleId":"735","replacedBy":"736"},{"ruleId":"737","replacedBy":"738"},{"ruleId":"731","severity":1,"message":"739","line":19,"column":8,"nodeType":"733","messageId":"734","endLine":19,"endColumn":22},{"ruleId":"731","severity":1,"message":"740","line":21,"column":8,"nodeType":"733","messageId":"734","endLine":21,"endColumn":16},{"ruleId":"731","severity":1,"message":"741","line":22,"column":8,"nodeType":"733","messageId":"734","endLine":22,"endColumn":17},{"ruleId":"731","severity":1,"message":"742","line":24,"column":8,"nodeType":"733","messageId":"734","endLine":24,"endColumn":19},{"ruleId":"743","severity":1,"message":"744","line":9,"column":52,"nodeType":"745","messageId":"746","endLine":9,"endColumn":53,"suggestions":"747"},{"ruleId":"748","severity":1,"message":"749","line":11,"column":13,"nodeType":"750","messageId":"751","endLine":11,"endColumn":15},{"ruleId":"731","severity":1,"message":"752","line":2,"column":24,"nodeType":"733","messageId":"734","endLine":2,"endColumn":46},{"ruleId":"753","severity":1,"message":"754","line":23,"column":6,"nodeType":"755","endLine":23,"endColumn":8,"suggestions":"756"},{"ruleId":"731","severity":1,"message":"757","line":5,"column":10,"nodeType":"733","messageId":"734","endLine":5,"endColumn":14},{"ruleId":"731","severity":1,"message":"758","line":8,"column":10,"nodeType":"733","messageId":"734","endLine":8,"endColumn":27},{"ruleId":"753","severity":1,"message":"754","line":21,"column":6,"nodeType":"755","endLine":21,"endColumn":8,"suggestions":"759"},{"ruleId":"735","replacedBy":"760"},{"ruleId":"737","replacedBy":"761"},{"ruleId":"731","severity":1,"message":"762","line":20,"column":10,"nodeType":"733","messageId":"734","endLine":20,"endColumn":14},{"ruleId":"731","severity":1,"message":"763","line":20,"column":16,"nodeType":"733","messageId":"734","endLine":20,"endColumn":23},{"ruleId":"731","severity":1,"message":"762","line":20,"column":10,"nodeType":"733","messageId":"734","endLine":20,"endColumn":14},{"ruleId":"731","severity":1,"message":"763","line":20,"column":16,"nodeType":"733","messageId":"734","endLine":20,"endColumn":23},{"ruleId":"753","severity":1,"message":"764","line":42,"column":6,"nodeType":"755","endLine":42,"endColumn":16,"suggestions":"765"},{"ruleId":"731","severity":1,"message":"766","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":34},{"ruleId":"753","severity":1,"message":"767","line":33,"column":6,"nodeType":"755","endLine":33,"endColumn":8,"suggestions":"768"},{"ruleId":"753","severity":1,"message":"769","line":44,"column":6,"nodeType":"755","endLine":44,"endColumn":14,"suggestions":"770"},{"ruleId":"731","severity":1,"message":"771","line":20,"column":13,"nodeType":"733","messageId":"734","endLine":20,"endColumn":17},{"ruleId":"753","severity":1,"message":"754","line":55,"column":6,"nodeType":"755","endLine":55,"endColumn":30,"suggestions":"772"},{"ruleId":"753","severity":1,"message":"769","line":110,"column":6,"nodeType":"755","endLine":110,"endColumn":21,"suggestions":"773"},{"ruleId":"753","severity":1,"message":"754","line":21,"column":6,"nodeType":"755","endLine":21,"endColumn":8,"suggestions":"774"},{"ruleId":"731","severity":1,"message":"775","line":5,"column":17,"nodeType":"733","messageId":"734","endLine":5,"endColumn":25},{"ruleId":"753","severity":1,"message":"776","line":21,"column":6,"nodeType":"755","endLine":21,"endColumn":26,"suggestions":"777"},{"ruleId":"731","severity":1,"message":"778","line":63,"column":9,"nodeType":"733","messageId":"734","endLine":63,"endColumn":20},{"ruleId":"731","severity":1,"message":"779","line":235,"column":9,"nodeType":"733","messageId":"734","endLine":235,"endColumn":13},{"ruleId":"731","severity":1,"message":"778","line":301,"column":9,"nodeType":"733","messageId":"734","endLine":301,"endColumn":20},{"ruleId":"731","severity":1,"message":"780","line":309,"column":9,"nodeType":"733","messageId":"734","endLine":309,"endColumn":22},{"ruleId":"753","severity":1,"message":"781","line":21,"column":6,"nodeType":"755","endLine":21,"endColumn":16,"suggestions":"782"},{"ruleId":"731","severity":1,"message":"783","line":21,"column":22,"nodeType":"733","messageId":"734","endLine":21,"endColumn":35},{"ruleId":"731","severity":1,"message":"784","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":16},{"ruleId":"731","severity":1,"message":"785","line":13,"column":10,"nodeType":"733","messageId":"734","endLine":13,"endColumn":23},{"ruleId":"731","severity":1,"message":"786","line":4,"column":41,"nodeType":"733","messageId":"734","endLine":4,"endColumn":48},{"ruleId":"731","severity":1,"message":"787","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":17},{"ruleId":"731","severity":1,"message":"775","line":4,"column":9,"nodeType":"733","messageId":"734","endLine":4,"endColumn":17},{"ruleId":"731","severity":1,"message":"786","line":10,"column":41,"nodeType":"733","messageId":"734","endLine":10,"endColumn":48},{"ruleId":"731","severity":1,"message":"787","line":11,"column":38,"nodeType":"733","messageId":"734","endLine":11,"endColumn":52},{"ruleId":"731","severity":1,"message":"788","line":23,"column":9,"nodeType":"733","messageId":"734","endLine":23,"endColumn":16},{"ruleId":"753","severity":1,"message":"789","line":37,"column":6,"nodeType":"755","endLine":37,"endColumn":8,"suggestions":"790"},{"ruleId":"791","severity":1,"message":"792","line":121,"column":17,"nodeType":"793","messageId":"794","endLine":121,"endColumn":27,"fix":"795"},{"ruleId":"791","severity":1,"message":"792","line":122,"column":17,"nodeType":"793","messageId":"794","endLine":122,"endColumn":36,"fix":"796"},{"ruleId":"753","severity":1,"message":"797","line":50,"column":6,"nodeType":"755","endLine":50,"endColumn":8,"suggestions":"798"},{"ruleId":"753","severity":1,"message":"799","line":107,"column":6,"nodeType":"755","endLine":107,"endColumn":28,"suggestions":"800"},{"ruleId":"753","severity":1,"message":"801","line":119,"column":6,"nodeType":"755","endLine":119,"endColumn":28,"suggestions":"802"},{"ruleId":"731","severity":1,"message":"803","line":2,"column":24,"nodeType":"733","messageId":"734","endLine":2,"endColumn":29},{"ruleId":"731","severity":1,"message":"804","line":18,"column":10,"nodeType":"733","messageId":"734","endLine":18,"endColumn":16},{"ruleId":"731","severity":1,"message":"805","line":18,"column":18,"nodeType":"733","messageId":"734","endLine":18,"endColumn":29},{"ruleId":"731","severity":1,"message":"806","line":18,"column":31,"nodeType":"733","messageId":"734","endLine":18,"endColumn":43},{"ruleId":"731","severity":1,"message":"807","line":18,"column":45,"nodeType":"733","messageId":"734","endLine":18,"endColumn":59},{"ruleId":"731","severity":1,"message":"778","line":61,"column":9,"nodeType":"733","messageId":"734","endLine":61,"endColumn":20},{"ruleId":"808","severity":1,"message":"809","line":91,"column":13,"nodeType":"810","endLine":95,"endColumn":15},{"ruleId":"808","severity":1,"message":"809","line":37,"column":13,"nodeType":"810","endLine":41,"endColumn":15},{"ruleId":"731","severity":1,"message":"811","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":20},{"ruleId":"812","severity":1,"message":"813","line":27,"column":9,"nodeType":"810","endLine":35,"endColumn":10},{"ruleId":"812","severity":1,"message":"813","line":51,"column":9,"nodeType":"810","endLine":59,"endColumn":10},{"ruleId":"731","severity":1,"message":"811","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":20},{"ruleId":"731","severity":1,"message":"814","line":3,"column":23,"nodeType":"733","messageId":"734","endLine":3,"endColumn":34},{"ruleId":"753","severity":1,"message":"769","line":12,"column":6,"nodeType":"755","endLine":12,"endColumn":15,"suggestions":"815"},{"ruleId":"753","severity":1,"message":"816","line":23,"column":6,"nodeType":"755","endLine":23,"endColumn":8,"suggestions":"817"},{"ruleId":"753","severity":1,"message":"769","line":31,"column":6,"nodeType":"755","endLine":31,"endColumn":17,"suggestions":"818"},{"ruleId":"753","severity":1,"message":"816","line":23,"column":6,"nodeType":"755","endLine":23,"endColumn":8,"suggestions":"819"},{"ruleId":"753","severity":1,"message":"769","line":31,"column":6,"nodeType":"755","endLine":31,"endColumn":17,"suggestions":"820"},{"ruleId":"748","severity":1,"message":"749","line":11,"column":31,"nodeType":"750","messageId":"751","endLine":11,"endColumn":33},{"ruleId":"812","severity":1,"message":"813","line":19,"column":9,"nodeType":"810","endLine":25,"endColumn":10},{"ruleId":"731","severity":1,"message":"811","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":20},{"ruleId":"731","severity":1,"message":"821","line":1,"column":22,"nodeType":"733","messageId":"734","endLine":1,"endColumn":27},{"ruleId":"812","severity":1,"message":"813","line":28,"column":9,"nodeType":"810","endLine":34,"endColumn":10},{"ruleId":"822","severity":1,"message":"823","line":103,"column":14,"nodeType":"733","messageId":"824","endLine":103,"endColumn":15},{"ruleId":"735","replacedBy":"825"},{"ruleId":"737","replacedBy":"826"},"no-unused-vars","'disableReactDevTools' is defined but never used.","Identifier","unusedVar","no-native-reassign",["827"],"no-negated-in-lhs",["828"],"'ForgetPassword' is defined but never used.","'Articles' is defined but never used.","'MyArticle' is defined but never used.","'ArticlePage' is defined but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["829","830"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getMultiPartAuthHeader' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["831"],"'Link' is defined but never used.","'FlexSectionHeader' is defined but never used.",["832"],["827"],["828"],"'load' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.username'. Either include it or remove the dependency array.",["833"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'courseId' and 'dispatch'. Either include them or remove the dependency array.",["834"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["835"],"'data' is assigned a value but never used.",["836"],["837"],["838"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'privilege'. Either include it or remove the dependency array.",["839"],"'onTxtChange' is assigned a value but never used.","'Text' is assigned a value but never used.","'onTitleChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'assessmentId', 'courseId', and 'user._id'. Either include them or remove the dependency array.",["840"],"'setUniversity' is assigned a value but never used.","'CrownOutlined' is defined but never used.","'RiArticleLine' is defined but never used.","'Divider' is defined but never used.","'GoogleOutlined' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'assessmentId', 'courseId', and 'dispatch'. Either include them or remove the dependency array.",["841"],"no-whitespace-before-property","Unexpected whitespace before property _id.","MemberExpression","unexpectedWhitespace",{"range":"842","text":"843"},{"range":"844","text":"843"},"React Hook useEffect has a missing dependency: 'submission.files'. Either include it or remove the dependency array.",["845"],"React Hook useCallback has missing dependencies: 'examId' and 'handleUpload'. Either include them or remove the dependency array.",["846"],"React Hook useEffect has a missing dependency: 'capture'. Either include it or remove the dependency array.",["847"],"'Input' is defined but never used.","'Editor' is defined but never used.","'EditorState' is defined but never used.","'ContentState' is defined but never used.","'convertFromRaw' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Tag' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useDispatch' is defined but never used.",["848"],"React Hook useEffect has missing dependencies: 'answer?.studentAnswer' and 'form'. Either include them or remove the dependency array.",["849"],["850"],["851"],["852"],"'Space' is defined but never used.","no-redeclare","'i' is already defined.","redeclared",["827"],["828"],"no-global-assign","no-unsafe-negation",{"messageId":"853","fix":"854","desc":"855"},{"messageId":"856","fix":"857","desc":"858"},{"desc":"859","fix":"860"},{"desc":"859","fix":"861"},{"desc":"862","fix":"863"},{"desc":"864","fix":"865"},{"desc":"866","fix":"867"},{"desc":"868","fix":"869"},{"desc":"870","fix":"871"},{"desc":"859","fix":"872"},{"desc":"873","fix":"874"},{"desc":"875","fix":"876"},{"desc":"877","fix":"878"},[3027,3030],"?.",[3064,3067],{"desc":"879","fix":"880"},{"desc":"881","fix":"882"},{"desc":"883","fix":"884"},{"desc":"885","fix":"886"},{"desc":"887","fix":"888"},{"desc":"889","fix":"890"},{"desc":"887","fix":"891"},{"desc":"889","fix":"892"},"removeEscape",{"range":"893","text":"894"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"895","text":"896"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [dispatch]",{"range":"897","text":"898"},{"range":"899","text":"898"},"Update the dependencies array to be: [dispatch, user.username]",{"range":"900","text":"901"},"Update the dependencies array to be: [courseId, dispatch]",{"range":"902","text":"903"},"Update the dependencies array to be: [course, form]",{"range":"904","text":"905"},"Update the dependencies array to be: [courseId, assessmentId, dispatch]",{"range":"906","text":"907"},"Update the dependencies array to be: [form, selectedIndex]",{"range":"908","text":"909"},{"range":"910","text":"898"},"Update the dependencies array to be: [dispatch, courseId, privilege]",{"range":"911","text":"912"},"Update the dependencies array to be: [assessmentId, courseId, dispatch, user._id]",{"range":"913","text":"914"},"Update the dependencies array to be: [assessmentId, courseId, dispatch]",{"range":"915","text":"916"},"Update the dependencies array to be: [submission.files]",{"range":"917","text":"918"},"Update the dependencies array to be: [frst, cnt, handleUpload, examId]",{"range":"919","text":"920"},"Update the dependencies array to be: [webcamRef, cnt, frst, capture]",{"range":"921","text":"922"},"Update the dependencies array to be: [answers, form]",{"range":"923","text":"924"},"Update the dependencies array to be: [answer?.studentAnswer, form]",{"range":"925","text":"926"},"Update the dependencies array to be: [form, submitted]",{"range":"927","text":"928"},{"range":"929","text":"926"},{"range":"930","text":"928"},[306,307],"",[306,306],"\\",[715,717],"[dispatch]",[707,709],[1157,1167],"[dispatch, user.username]",[965,967],"[courseId, dispatch]",[1242,1250],"[course, form]",[1470,1494],"[courseId, assessmentId, dispatch]",[2850,2865],"[form, selectedIndex]",[631,633],[776,796],"[dispatch, courseId, privilege]",[817,827],"[assessmentId, courseId, dispatch, user._id]",[1218,1220],"[assessmentId, courseId, dispatch]",[1272,1274],"[submission.files]",[2714,2736],"[frst, cnt, handleUpload, examId]",[2965,2987],"[webcamRef, cnt, frst, capture]",[303,312],"[answers, form]",[635,637],"[answer?.studentAnswer, form]",[764,775],"[form, submitted]",[628,630],[757,768]]